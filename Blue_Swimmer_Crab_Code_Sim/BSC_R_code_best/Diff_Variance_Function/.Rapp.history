chdwb.plink.freq.snp.number <- chdwb.update.gcta.freq[chdwb.update.gcta.freq[ , 1] %in% first.snp.number.snps[, 1], ]
chdwb.update.gcta.freq.snp.number <- chdwb.update.gcta.freq.snp.number[order(chdwb.update.gcta.freq.snp.number[, 1]), ]
chdwb.update.gcta.freq.snp.number <- chdwb.update.gcta.freq[chdwb.update.gcta.freq[ , 1] %in% first.snp.number.snps[, 1], ]
chdwb.update.gcta.freq.snp.number <- chdwb.update.gcta.freq.snp.number[order(chdwb.update.gcta.freq.snp.number[, 1]), ]
ref.frq <- cbind(as.character(ref.plink.freq.snp.number[ , 2]), as.numeric(ref.plink.freq.snp.number[ , 5]), #
                 as.character( ref.gcta.freq.snp.number[ , 1]),  as.numeric(ref.gcta.freq.snp.number[ , 3]))
ref.frq
chumby.frq <- cbind(as.character(chdwb.plink.freq.snp.number[ , 2]), as.numeric(as.character(chdwb.plink.freq.snp.number[ ,            5])), as.character(chdwb.update.gcta.freq.snp.number[ , 1]),  as.numeric(chdwb.update.gcta.freq.snp.number[ , 3]))
chumby.frq <- cbind(as.character(chdwb.plink.freq.snp.number[ , 2]), as.numeric(as.character(chdwb.plink.freq.snp.number[ ,5])), as.character(chdwb.update.gcta.freq.snp.number[ , 1]),  as.numeric(chdwb.update.gcta.freq.snp.number[ , 3]))
as.character(ref.plink.freq.snp.number[ , 2])
as.numeric(ref.plink.freq.snp.number[ , 5])
ref.plink.mafs   <- as.numeric(ref.plink.freq.snp.number[ , 5]))
ref.plink.mafs   <- as.numeric(ref.plink.freq.snp.number[ , 5])
ref.plink.mafs
as.numeric(as.character(chdwb.plink.freq.snp.number[ ,5]))
chdwb.plink.freq.snp.number
chdwb.update.gcta.freq.snp.number
first.snp.number.snps.2
first.snp.number.snps
ref.plink.freq
ref.plink.freq.snp.number
head(chdwb.plink.freq)
head(chdwb.update.gcta.freq)
head(ref.gcta.freq)
chdwb.maf.post.imp     <- read.table("/Users/uqllloyd/Desktop/CAGE_impute_prob/CHDWB1_22_Post_Impute/DAT22.frq", header = T)#
ref.plink.freq         <- read.table("~/Desktop/CAGE_impute_prob/Hrs_Ref_Data/hrs_1kg_chr22.frq", header = T)#
ref.gcta.freq          <- read.table("~/Desktop/CAGE_impute_prob/Hrs_Ref_Data/hrs_1kg_hwe1e-6_chr22.freq", header = F)#
chdwb.plink.freq       <- read.table("~/Desktop/CAGE_impute_prob/CHDWB1_22/CHDWB1_22/CHDWB1_22.frq", header = T)#
chdwb.update.gcta.freq <- read.table("~/Desktop/CAGE_impute_prob/CHDWB1_22/CHDWB1_22_update.freq", header = F)
orig.csv.file <- read.csv("~/Desktop/CAGE_impute_prob/CHDWB1_22_Orig/GG1_chr22.csv", header = T)#
snp.names <- orig.csv.file[ ,1]#
orig.csv.file <- t(orig.csv.file[, -1])#
snp.number <- 10#
snp.subset <- snp.names[1:snp.number]#
snp.subset <- snp.subset[order(snp.subset)]
# Define two empty data frames#
#
first.snp.number.snps <- data.frame(matrix(ncol = 5, nrow = snp.number))#
first.snp.number.snps.2 <- data.frame(matrix(ncol = 7, nrow = snp.number))#
maf.true <- array(0, snp.number)#
#
# Cycle over the first snp.number snps and write out some stats#
#
# Use table to tally up the allele frequencies#
#
for (i in seq(1, snp.number)){#
#
table.out <- table(orig.csv.file[, i])#
print(c(as.character(snp.names[i]), table.out))#
table.out <- table.out[order(names(table.out))]#
#
if (length(which(names(table.out) == "--")) > 0) { #
	table.out <- table.out[-which(names(table.out) == "--")]#
	}#
#
if (length(table.out) == 3) {#
  num.allele.1 <- 2 * table.out[1] + table.out[2]#
  num.allele.2 <- 2 * table.out[3] + table.out[2]#
  } else {#
  num.allele.1  <- table.out[1] #
  num.allele.2 <- 2 * table.out[2] + table.out[1]#
  }#
#
af.1 <- num.allele.1 / (num.allele.1 + num.allele.2)#
af.2 <- num.allele.2 / (num.allele.1 + num.allele.2)#
#
first.snp.number.snps[i, 1] <- as.character(snp.names[i]) #
first.snp.number.snps[i, 2] <- names(af.1)#
first.snp.number.snps[i, 3] <- round(as.numeric(af.1), 4) #
first.snp.number.snps[i, 4] <- names(af.2)#
first.snp.number.snps[i, 5] <- round(as.numeric(af.2), 4)#
#
first.snp.number.snps.2[i, 1] <- as.character(snp.names[i]) #
first.snp.number.snps.2[i, 2] <- names(table.out)[1]#
first.snp.number.snps.2[i, 3] <- names(table.out)[2]#
first.snp.number.snps.2[i, 4] <- names(table.out)[3]#
first.snp.number.snps.2[i, 5] <- round(as.numeric(table.out[1]), 4)#
first.snp.number.snps.2[i, 6] <- round(as.numeric(table.out[2]), 4)#
first.snp.number.snps.2[i, 7] <- round(as.numeric(table.out[3]), 4)#
#
colnames(first.snp.number.snps)   <- c("SNP", "A1", "A1_freq", "A2", "A2_freq")#
colnames(first.snp.number.snps.2) <- c("SNP", "A1", "A12", "A2", "A1_Num", "A1_Num", "A1_Num")#
#
allele.freqs <- c(first.snp.number.snps[i, 3], first.snp.number.snps[i, 5])#
maf.true[i] <- allele.freqs[which(allele.freqs < 0.5 )]#
}
maf.true
# Reference from plink#
#
ref.plink.freq.snp.number <- ref.plink.freq[which(ref.plink.freq[ , 2] %in% first.snp.number.snps[, 1]), ]#
ref.plink.freq.snp.number <- ref.plink.freq.snp.number[order(ref.plink.freq.snp.number [, 2]), ]#
# Reference from gcta#
#
ref.gcta.freq.snp.number <- ref.gcta.freq[which(ref.gcta.freq[ , 1] %in% first.snp.number.snps[, 1]), ]#
ref.gcta.freq.snp.number <- ref.gcta.freq.snp.number[order(ref.gcta.freq.snp.number[, 1]), ]#
# Chumby data plink#
#
chdwb.plink.freq.snp.number <- chdwb.plink.freq[which(chdwb.plink.freq[ , 2] %in% first.snp.number.snps[, 1]), ]#
chdwb.plink.freq.snp.number <- chdwb.plink.freq.snp.number[order(chdwb.plink.freq.snp.number[, 2]), ]#
# Chumby data GCTA  #
#
chdwb.update.gcta.freq.snp.number <- chdwb.update.gcta.freq[chdwb.update.gcta.freq[ , 1] %in% first.snp.number.snps[, 1], ]#
chdwb.update.gcta.freq.snp.number <- chdwb.update.gcta.freq.snp.number[order(chdwb.update.gcta.freq.snp.number[, 1]), ]
ref.plink.snps    <- as.character(ref.plink.freq.snp.number[ , 2])#
ref.plink.mafs    <- as.numeric(ref.plink.freq.snp.number[ , 5])#
#
ref.gcta.snps     <- as.character(ref.plink.freq.snp.number[ , 2])#
ref.gcta.mafs     <- as.numeric(ref.plink.freq.snp.number[ , 5])#
#
chdwb.plink.snps  <- as.character(chdwb.plink.freq.snp.number[ , 2])#
chdwb.plink.mafs  <- as.numeric(as.character(chdwb.plink.freq.snp.number[ ,5]))#
#
chdwb.gcta.snps   <- as.character(chdwb.update.gcta.freq.snp.number[ , 1])#
chdwb.gcta.mafs   <- as.numeric(chdwb.update.gcta.freq.snp.number[ , 3])
ref.plink.snps
ref.plink.mafs
ref.gcta.snps
ref.gcta.mafs
chdwb.plink.snps
chdwb.plink.mafs
chdwb.gcta.snps
chdwb.gcta.mafs
ref.plink.snps %in% ref.gcta.snps
(ref.plink.snps %in% ref.gcta.snps)
which(ref.plink.snps %in% ref.gcta.snps)
length(which(ref.plink.snps %in% ref.gcta.snps)) == snp.number
length(which(ref.plink.snps %in% chdwb.gcta.snps)) == snp.number
length(which(ref.plink.snps %in% chdwb.plink.snps)) == snp.number
matrix.test <- as.matrix(cbind(ref.plink.mafs, ref.gcta.mafs, chdwb.plink.mafs, chdwb.gcta.mafs, maf.true)
matrix.test <- as.matrix(cbind(ref.plink.mafs, ref.gcta.mafs, chdwb.plink.mafs, chdwb.gcta.mafs, maf.true))
matrix.test
plot(matrix.test[1:no.to.show, 1],   matrix.test[1:no.to.show, 5], col = "blue")
no.to.show <- 500
plot(matrix.test[1:no.to.show, 1],   matrix.test[1:no.to.show, 5], col = "blue")
no.to.show <- 10#
plot(matrix.test[1:no.to.show, 1],   matrix.test[1:no.to.show, 5], col = "blue")
ref.plink.snps
plot(matrix.test[1:no.to.show, 1],   matrix.test[1:no.to.show, 2], col = "blue")
plot(matrix.test[1:no.to.show, 1],   matrix.test[1:no.to.show, 3], col = "red" )
points(matrix.test[1:no.to.show, 1],   matrix.test[1:no.to.show, 5], col = "red" )
points(matrix.test[1:no.to.show, 1],   matrix.test[1:no.to.show, 5], col = "red", xlim = c(0, 1), ylim = c(0, 1) )
plot(matrix.test[1:no.to.show, 1],   matrix.test[1:no.to.show, 2], col = "blue", xlim = c(0, 1), ylim = c(0, 1))#
#
# Plot the reference versus plink chumby#
#
points(matrix.test[1:no.to.show, 1],   matrix.test[1:no.to.show, 3], col = "red" )#
#
# Plot the reference versus so called true chumby#
#
points(matrix.test[1:no.to.show, 1],   matrix.test[1:no.to.show, 5])
# Plot the reference versus itself just for a test#
#
plot(matrix.test[1:no.to.show, 1],   matrix.test[1:no.to.show, 2], col = "blue", xlim = c(0, 1), ylim = c(0, 1))#
#
# Plot the reference versus plink chumby#
#
points(matrix.test[1:no.to.show, 1],   matrix.test[1:no.to.show, 3], col = "red" )#
#
# Plot the reference versus so called true chumby#
#
points(matrix.test[1:no.to.show, 1],   matrix.test[1:no.to.show, 5], col = "green")
snp.number <- 100#
snp.subset <- snp.names[1:snp.number]#
snp.subset <- snp.subset[order(snp.subset)]#
# Have a look at the original allele frequencies by hand#
# ------------------------------------------------------#
#
# Define two empty data frames#
#
first.snp.number.snps <- data.frame(matrix(ncol = 5, nrow = snp.number))#
first.snp.number.snps.2 <- data.frame(matrix(ncol = 7, nrow = snp.number))#
maf.true <- array(0, snp.number)#
#
# Cycle over the first snp.number snps and write out some stats#
#
# Use table to tally up the allele frequencies#
#
for (i in seq(1, snp.number)){#
#
table.out <- table(orig.csv.file[, i])#
print(c(as.character(snp.names[i]), table.out))#
table.out <- table.out[order(names(table.out))]#
#
if (length(which(names(table.out) == "--")) > 0) { #
	table.out <- table.out[-which(names(table.out) == "--")]#
	}#
#
if (length(table.out) == 3) {#
  num.allele.1 <- 2 * table.out[1] + table.out[2]#
  num.allele.2 <- 2 * table.out[3] + table.out[2]#
  } else {#
  num.allele.1  <- table.out[1] #
  num.allele.2 <- 2 * table.out[2] + table.out[1]#
  }#
#
af.1 <- num.allele.1 / (num.allele.1 + num.allele.2)#
af.2 <- num.allele.2 / (num.allele.1 + num.allele.2)#
#
first.snp.number.snps[i, 1] <- as.character(snp.names[i]) #
first.snp.number.snps[i, 2] <- names(af.1)#
first.snp.number.snps[i, 3] <- round(as.numeric(af.1), 4) #
first.snp.number.snps[i, 4] <- names(af.2)#
first.snp.number.snps[i, 5] <- round(as.numeric(af.2), 4)#
#
first.snp.number.snps.2[i, 1] <- as.character(snp.names[i]) #
first.snp.number.snps.2[i, 2] <- names(table.out)[1]#
first.snp.number.snps.2[i, 3] <- names(table.out)[2]#
first.snp.number.snps.2[i, 4] <- names(table.out)[3]#
first.snp.number.snps.2[i, 5] <- round(as.numeric(table.out[1]), 4)#
first.snp.number.snps.2[i, 6] <- round(as.numeric(table.out[2]), 4)#
first.snp.number.snps.2[i, 7] <- round(as.numeric(table.out[3]), 4)#
#
colnames(first.snp.number.snps)   <- c("SNP", "A1", "A1_freq", "A2", "A2_freq")#
colnames(first.snp.number.snps.2) <- c("SNP", "A1", "A12", "A2", "A1_Num", "A1_Num", "A1_Num")#
#
allele.freqs <- c(first.snp.number.snps[i, 3], first.snp.number.snps[i, 5])#
maf.true[i] <- allele.freqs[which(allele.freqs < 0.5 )]#
} #
# Pull out these SNPs and check their allele frequencies at diff stages of the data #
# processing#
# ---------------------------------------------------------------------------------#
# Reference from plink#
#
ref.plink.freq.snp.number <- ref.plink.freq[which(ref.plink.freq[ , 2] %in% first.snp.number.snps[, 1]), ]#
ref.plink.freq.snp.number <- ref.plink.freq.snp.number[order(ref.plink.freq.snp.number [, 2]), ]#
# Reference from gcta#
#
ref.gcta.freq.snp.number <- ref.gcta.freq[which(ref.gcta.freq[ , 1] %in% first.snp.number.snps[, 1]), ]#
ref.gcta.freq.snp.number <- ref.gcta.freq.snp.number[order(ref.gcta.freq.snp.number[, 1]), ]#
# Chumby data plink#
#
chdwb.plink.freq.snp.number <- chdwb.plink.freq[which(chdwb.plink.freq[ , 2] %in% first.snp.number.snps[, 1]), ]#
chdwb.plink.freq.snp.number <- chdwb.plink.freq.snp.number[order(chdwb.plink.freq.snp.number[, 2]), ]#
# Chumby data GCTA  #
#
chdwb.update.gcta.freq.snp.number <- chdwb.update.gcta.freq[chdwb.update.gcta.freq[ , 1] %in% first.snp.number.snps[, 1], ]#
chdwb.update.gcta.freq.snp.number <- chdwb.update.gcta.freq.snp.number[order(chdwb.update.gcta.freq.snp.number[, 1]), ]#
# Chumby data post impute plink#
#
chdwb.maf.post.imp <- chdwb.update.gcta.freq[chdwb.update.gcta.freq[ , 1] %in% first.snp.number.snps[, 1], ]#
# Combine the reference MAF and SNP names for checking#
#
ref.plink.snps    <- as.character(ref.plink.freq.snp.number[ , 2])#
ref.plink.mafs    <- as.numeric(ref.plink.freq.snp.number[ , 5])#
#
ref.gcta.snps     <- as.character(ref.plink.freq.snp.number[ , 2])#
ref.gcta.mafs     <- as.numeric(ref.plink.freq.snp.number[ , 5])#
#
chdwb.plink.snps  <- as.character(chdwb.plink.freq.snp.number[ , 2])#
chdwb.plink.mafs  <- as.numeric(as.character(chdwb.plink.freq.snp.number[ ,5]))#
#
chdwb.gcta.snps   <- as.character(chdwb.update.gcta.freq.snp.number[ , 1])#
chdwb.gcta.mafs   <- as.numeric(chdwb.update.gcta.freq.snp.number[ , 3])#
# Are all the SNP in the reference in the reference ?#
#
length(which(ref.plink.snps %in% ref.gcta.snps)) == snp.number#
# Are all the SNPs in the reference in both CHDWB subsets ?#
#
length(which(ref.plink.snps %in% chdwb.gcta.snps))  == snp.number#
length(which(ref.plink.snps %in% chdwb.plink.snps)) == snp.number#
# Build a matrix of all the allele frequencies for easy access#
#
matrix.test <- as.matrix(cbind(ref.plink.mafs, ref.gcta.mafs, chdwb.plink.mafs, chdwb.gcta.mafs, maf.true))#
#
# Plot the MAF from the original data against the reference#
#
no.to.show <- 10#
#
# Plot the reference versus itself just for a test#
#
plot(matrix.test[1:no.to.show, 1],   matrix.test[1:no.to.show, 2], col = "blue", xlim = c(0, 1), ylim = c(0, 1))#
#
# Plot the reference versus plink chumby#
#
points(matrix.test[1:no.to.show, 1],   matrix.test[1:no.to.show, 3], col = "red" )#
#
# Plot the reference versus so called true chumby#
#
points(matrix.test[1:no.to.show, 1],   matrix.test[1:no.to.show, 5], col = "green")
table.out
# Use table to tally up the allele frequencies#
#
for (i in seq(1, snp.number)){#
#
table.out <- table(orig.csv.file[, i])#
print(c(as.character(snp.names[i]), table.out))#
table.out <- table.out[order(names(table.out))]#
#
if (length(which(names(table.out) == "--")) > 0) { #
	table.out <- table.out[-which(names(table.out) == "--")]#
	}#
#
if (length(table.out) == 3) {#
  num.allele.1 <- 2 * table.out[1] + table.out[2]#
  num.allele.2 <- 2 * table.out[3] + table.out[2]#
  } else if (length(table.out) == 1) {#
  num.allele.1  <- 2 * table.out[1] #
  num.allele.2  <- 0#
  } else {#
  num.allele.1  <- table.out[1] #
  num.allele.2 <- 2 * table.out[2] + table.out[1]#
  }#
#
af.1 <- num.allele.1 / (num.allele.1 + num.allele.2)#
af.2 <- num.allele.2 / (num.allele.1 + num.allele.2)#
#
first.snp.number.snps[i, 1] <- as.character(snp.names[i]) #
first.snp.number.snps[i, 2] <- names(af.1)#
first.snp.number.snps[i, 3] <- round(as.numeric(af.1), 4) #
first.snp.number.snps[i, 4] <- names(af.2)#
first.snp.number.snps[i, 5] <- round(as.numeric(af.2), 4)#
#
first.snp.number.snps.2[i, 1] <- as.character(snp.names[i]) #
first.snp.number.snps.2[i, 2] <- names(table.out)[1]#
first.snp.number.snps.2[i, 3] <- names(table.out)[2]#
first.snp.number.snps.2[i, 4] <- names(table.out)[3]#
first.snp.number.snps.2[i, 5] <- round(as.numeric(table.out[1]), 4)#
first.snp.number.snps.2[i, 6] <- round(as.numeric(table.out[2]), 4)#
first.snp.number.snps.2[i, 7] <- round(as.numeric(table.out[3]), 4)#
#
colnames(first.snp.number.snps)   <- c("SNP", "A1", "A1_freq", "A2", "A2_freq")#
colnames(first.snp.number.snps.2) <- c("SNP", "A1", "A12", "A2", "A1_Num", "A1_Num", "A1_Num")#
#
allele.freqs <- c(first.snp.number.snps[i, 3], first.snp.number.snps[i, 5])#
maf.true[i] <- allele.freqs[which(allele.freqs < 0.5 )]#
}
# Reference from plink#
#
ref.plink.freq.snp.number <- ref.plink.freq[which(ref.plink.freq[ , 2] %in% first.snp.number.snps[, 1]), ]#
ref.plink.freq.snp.number <- ref.plink.freq.snp.number[order(ref.plink.freq.snp.number [, 2]), ]#
# Reference from gcta#
#
ref.gcta.freq.snp.number <- ref.gcta.freq[which(ref.gcta.freq[ , 1] %in% first.snp.number.snps[, 1]), ]#
ref.gcta.freq.snp.number <- ref.gcta.freq.snp.number[order(ref.gcta.freq.snp.number[, 1]), ]#
# Chumby data plink#
#
chdwb.plink.freq.snp.number <- chdwb.plink.freq[which(chdwb.plink.freq[ , 2] %in% first.snp.number.snps[, 1]), ]#
chdwb.plink.freq.snp.number <- chdwb.plink.freq.snp.number[order(chdwb.plink.freq.snp.number[, 2]), ]#
# Chumby data GCTA  #
#
chdwb.update.gcta.freq.snp.number <- chdwb.update.gcta.freq[chdwb.update.gcta.freq[ , 1] %in% first.snp.number.snps[, 1], ]#
chdwb.update.gcta.freq.snp.number <- chdwb.update.gcta.freq.snp.number[order(chdwb.update.gcta.freq.snp.number[, 1]), ]
# Combine the reference MAF and SNP names for checking#
#
ref.plink.snps    <- as.character(ref.plink.freq.snp.number[ , 2])#
ref.plink.mafs    <- as.numeric(ref.plink.freq.snp.number[ , 5])#
#
ref.gcta.snps     <- as.character(ref.plink.freq.snp.number[ , 2])#
ref.gcta.mafs     <- as.numeric(ref.plink.freq.snp.number[ , 5])#
#
chdwb.plink.snps  <- as.character(chdwb.plink.freq.snp.number[ , 2])#
chdwb.plink.mafs  <- as.numeric(as.character(chdwb.plink.freq.snp.number[ ,5]))#
#
chdwb.gcta.snps   <- as.character(chdwb.update.gcta.freq.snp.number[ , 1])#
chdwb.gcta.mafs   <- as.numeric(chdwb.update.gcta.freq.snp.number[ , 3])
# Are all the SNP in the reference in the reference ?#
#
length(which(ref.plink.snps %in% ref.gcta.snps)) == snp.number#
# Are all the SNPs in the reference in both CHDWB subsets ?#
#
length(which(ref.plink.snps %in% chdwb.gcta.snps))  == snp.number#
length(which(ref.plink.snps %in% chdwb.plink.snps)) == snp.number
which(ref.plink.snps %in% ref.gcta.snps)
which(ref.plink.snps %in% chdwb.gcta.snps)
which(ref.plink.snps %in% chdwb.plink.snps)
orig.csv.file <- read.csv("~/Desktop/CAGE_impute_prob/CHDWB1_22_Orig/GG1_chr22.csv", header = T)#
snp.names <- orig.csv.file[ ,1]#
orig.csv.file <- t(orig.csv.file[, -1])#
snp.number <- 30#
snp.subset <- snp.names[1:snp.number]#
snp.subset <- snp.subset[order(snp.subset)]
# Have a look at the original allele frequencies by hand#
# ------------------------------------------------------#
#
# Define two empty data frames#
#
first.snp.number.snps <- data.frame(matrix(ncol = 5, nrow = snp.number))#
first.snp.number.snps.2 <- data.frame(matrix(ncol = 7, nrow = snp.number))#
maf.true <- array(0, snp.number)#
#
# Cycle over the first snp.number snps and write out some stats#
#
# Use table to tally up the allele frequencies#
#
for (i in seq(1, snp.number)){#
#
table.out <- table(orig.csv.file[, i])#
print(c(as.character(snp.names[i]), table.out))#
table.out <- table.out[order(names(table.out))]#
#
if (length(which(names(table.out) == "--")) > 0) { #
	table.out <- table.out[-which(names(table.out) == "--")]#
	}#
#
if (length(table.out) == 3) {#
  num.allele.1 <- 2 * table.out[1] + table.out[2]#
  num.allele.2 <- 2 * table.out[3] + table.out[2]#
  } else if (length(table.out) == 1) {#
  num.allele.1  <- 2 * table.out[1] #
  num.allele.2  <- 0#
  } else {#
  num.allele.1  <- table.out[1] #
  num.allele.2 <- 2 * table.out[2] + table.out[1]#
  }#
#
af.1 <- num.allele.1 / (num.allele.1 + num.allele.2)#
af.2 <- num.allele.2 / (num.allele.1 + num.allele.2)#
#
first.snp.number.snps[i, 1] <- as.character(snp.names[i]) #
first.snp.number.snps[i, 2] <- names(af.1)#
first.snp.number.snps[i, 3] <- round(as.numeric(af.1), 4) #
first.snp.number.snps[i, 4] <- names(af.2)#
first.snp.number.snps[i, 5] <- round(as.numeric(af.2), 4)#
#
first.snp.number.snps.2[i, 1] <- as.character(snp.names[i]) #
first.snp.number.snps.2[i, 2] <- names(table.out)[1]#
first.snp.number.snps.2[i, 3] <- names(table.out)[2]#
first.snp.number.snps.2[i, 4] <- names(table.out)[3]#
first.snp.number.snps.2[i, 5] <- round(as.numeric(table.out[1]), 4)#
first.snp.number.snps.2[i, 6] <- round(as.numeric(table.out[2]), 4)#
first.snp.number.snps.2[i, 7] <- round(as.numeric(table.out[3]), 4)#
#
colnames(first.snp.number.snps)   <- c("SNP", "A1", "A1_freq", "A2", "A2_freq")#
colnames(first.snp.number.snps.2) <- c("SNP", "A1", "A12", "A2", "A1_Num", "A1_Num", "A1_Num")#
#
allele.freqs <- c(first.snp.number.snps[i, 3], first.snp.number.snps[i, 5])#
maf.true[i] <- allele.freqs[which(allele.freqs < 0.5 )]#
} #
# Pull out these SNPs and check their allele frequencies at diff stages of the data #
# processing#
# ---------------------------------------------------------------------------------#
# Reference from plink#
#
ref.plink.freq.snp.number <- ref.plink.freq[which(ref.plink.freq[ , 2] %in% first.snp.number.snps[, 1]), ]#
ref.plink.freq.snp.number <- ref.plink.freq.snp.number[order(ref.plink.freq.snp.number [, 2]), ]#
# Reference from gcta#
#
ref.gcta.freq.snp.number <- ref.gcta.freq[which(ref.gcta.freq[ , 1] %in% first.snp.number.snps[, 1]), ]#
ref.gcta.freq.snp.number <- ref.gcta.freq.snp.number[order(ref.gcta.freq.snp.number[, 1]), ]#
# Chumby data plink#
#
chdwb.plink.freq.snp.number <- chdwb.plink.freq[which(chdwb.plink.freq[ , 2] %in% first.snp.number.snps[, 1]), ]#
chdwb.plink.freq.snp.number <- chdwb.plink.freq.snp.number[order(chdwb.plink.freq.snp.number[, 2]), ]#
# Chumby data GCTA  #
#
chdwb.update.gcta.freq.snp.number <- chdwb.update.gcta.freq[chdwb.update.gcta.freq[ , 1] %in% first.snp.number.snps[, 1], ]#
chdwb.update.gcta.freq.snp.number <- chdwb.update.gcta.freq.snp.number[order(chdwb.update.gcta.freq.snp.number[, 1]), ]
# Combine the reference MAF and SNP names for checking#
#
ref.plink.snps    <- as.character(ref.plink.freq.snp.number[ , 2])#
ref.plink.mafs    <- as.numeric(ref.plink.freq.snp.number[ , 5])#
#
ref.gcta.snps     <- as.character(ref.plink.freq.snp.number[ , 2])#
ref.gcta.mafs     <- as.numeric(ref.plink.freq.snp.number[ , 5])#
#
chdwb.plink.snps  <- as.character(chdwb.plink.freq.snp.number[ , 2])#
chdwb.plink.mafs  <- as.numeric(as.character(chdwb.plink.freq.snp.number[ ,5]))#
#
chdwb.gcta.snps   <- as.character(chdwb.update.gcta.freq.snp.number[ , 1])#
chdwb.gcta.mafs   <- as.numeric(chdwb.update.gcta.freq.snp.number[ , 3])
# Are all the SNP in the reference in the reference ?#
#
length(which(ref.plink.snps %in% ref.gcta.snps)) == snp.number#
# Are all the SNPs in the reference in both CHDWB subsets ?#
#
length(which(ref.plink.snps %in% chdwb.gcta.snps))  == snp.number#
length(which(ref.plink.snps %in% chdwb.plink.snps)) == snp.number
which(ref.plink.snps %in% ref.gcta.snps)
ref.gcta.snps
ref.plink.snps
orig.csv.file <- read.csv("~/Desktop/CAGE_impute_prob/CHDWB1_22_Orig/GG1_chr22.csv", header = T)#
snp.names <- orig.csv.file[ ,1]#
orig.csv.file <- t(orig.csv.file[, -1])#
snp.number <- 20#
snp.subset <- snp.names[1:snp.number]#
snp.subset <- snp.subset[order(snp.subset)]#
# Have a look at the original allele frequencies by hand#
# ------------------------------------------------------#
#
# Define two empty data frames#
#
first.snp.number.snps <- data.frame(matrix(ncol = 5, nrow = snp.number))#
first.snp.number.snps.2 <- data.frame(matrix(ncol = 7, nrow = snp.number))#
maf.true <- array(0, snp.number)#
#
# Cycle over the first snp.number snps and write out some stats#
#
# Use table to tally up the allele frequencies#
#
for (i in seq(1, snp.number)){#
#
table.out <- table(orig.csv.file[, i])#
print(c(as.character(snp.names[i]), table.out))#
table.out <- table.out[order(names(table.out))]#
#
if (length(which(names(table.out) == "--")) > 0) { #
	table.out <- table.out[-which(names(table.out) == "--")]#
	}#
#
if (length(table.out) == 3) {#
  num.allele.1 <- 2 * table.out[1] + table.out[2]#
  num.allele.2 <- 2 * table.out[3] + table.out[2]#
  } else if (length(table.out) == 1) {#
  num.allele.1  <- 2 * table.out[1] #
  num.allele.2  <- 0#
  } else {#
  num.allele.1  <- table.out[1] #
  num.allele.2 <- 2 * table.out[2] + table.out[1]#
  }#
#
af.1 <- num.allele.1 / (num.allele.1 + num.allele.2)#
af.2 <- num.allele.2 / (num.allele.1 + num.allele.2)#
#
first.snp.number.snps[i, 1] <- as.character(snp.names[i]) #
first.snp.number.snps[i, 2] <- names(af.1)#
first.snp.number.snps[i, 3] <- round(as.numeric(af.1), 4) #
first.snp.number.snps[i, 4] <- names(af.2)#
first.snp.number.snps[i, 5] <- round(as.numeric(af.2), 4)#
#
first.snp.number.snps.2[i, 1] <- as.character(snp.names[i]) #
first.snp.number.snps.2[i, 2] <- names(table.out)[1]#
first.snp.number.snps.2[i, 3] <- names(table.out)[2]#
first.snp.number.snps.2[i, 4] <- names(table.out)[3]#
first.snp.number.snps.2[i, 5] <- round(as.numeric(table.out[1]), 4)#
first.snp.number.snps.2[i, 6] <- round(as.numeric(table.out[2]), 4)#
first.snp.number.snps.2[i, 7] <- round(as.numeric(table.out[3]), 4)#
#
colnames(first.snp.number.snps)   <- c("SNP", "A1", "A1_freq", "A2", "A2_freq")#
colnames(first.snp.number.snps.2) <- c("SNP", "A1", "A12", "A2", "A1_Num", "A1_Num", "A1_Num")#
#
allele.freqs <- c(first.snp.number.snps[i, 3], first.snp.number.snps[i, 5])#
maf.true[i] <- allele.freqs[which(allele.freqs < 0.5 )]#
}
# Pull out these SNPs and check their allele frequencies at diff stages of the data #
# processing#
# ---------------------------------------------------------------------------------#
# Reference from plink#
#
ref.plink.freq.snp.number <- ref.plink.freq[which(ref.plink.freq[ , 2] %in% first.snp.number.snps[, 1]), ]#
ref.plink.freq.snp.number <- ref.plink.freq.snp.number[order(ref.plink.freq.snp.number [, 2]), ]#
# Reference from gcta#
#
ref.gcta.freq.snp.number <- ref.gcta.freq[which(ref.gcta.freq[ , 1] %in% first.snp.number.snps[, 1]), ]#
ref.gcta.freq.snp.number <- ref.gcta.freq.snp.number[order(ref.gcta.freq.snp.number[, 1]), ]#
# Chumby data plink#
#
chdwb.plink.freq.snp.number <- chdwb.plink.freq[which(chdwb.plink.freq[ , 2] %in% first.snp.number.snps[, 1]), ]#
chdwb.plink.freq.snp.number <- chdwb.plink.freq.snp.number[order(chdwb.plink.freq.snp.number[, 2]), ]#
# Chumby data GCTA  #
#
chdwb.update.gcta.freq.snp.number <- chdwb.update.gcta.freq[chdwb.update.gcta.freq[ , 1] %in% first.snp.number.snps[, 1], ]#
chdwb.update.gcta.freq.snp.number <- chdwb.update.gcta.freq.snp.number[order(chdwb.update.gcta.freq.snp.number[, 1]), ]
# Combine the reference MAF and SNP names for checking#
#
ref.plink.snps    <- as.character(ref.plink.freq.snp.number[ , 2])#
ref.plink.mafs    <- as.numeric(ref.plink.freq.snp.number[ , 5])#
#
ref.gcta.snps     <- as.character(ref.plink.freq.snp.number[ , 2])#
ref.gcta.mafs     <- as.numeric(ref.plink.freq.snp.number[ , 5])#
#
chdwb.plink.snps  <- as.character(chdwb.plink.freq.snp.number[ , 2])#
chdwb.plink.mafs  <- as.numeric(as.character(chdwb.plink.freq.snp.number[ ,5]))#
#
chdwb.gcta.snps   <- as.character(chdwb.update.gcta.freq.snp.number[ , 1])#
chdwb.gcta.mafs   <- as.numeric(chdwb.update.gcta.freq.snp.number[ , 3])
# Are all the SNP in the reference in the reference ?#
#
length(which(ref.plink.snps %in% ref.gcta.snps)) == snp.number#
# Are all the SNPs in the reference in both CHDWB subsets ?#
#
length(which(ref.plink.snps %in% chdwb.gcta.snps))  == snp.number#
length(which(ref.plink.snps %in% chdwb.plink.snps)) == snp.number
# Build a matrix of all the allele frequencies for easy access#
#
matrix.test <- as.matrix(cbind(ref.plink.mafs, ref.gcta.mafs, chdwb.plink.mafs, chdwb.gcta.mafs, maf.true))#
#
# Plot the MAF from the original data against the reference#
#
no.to.show <- snp.number#
#
# Plot the reference versus itself just for a test#
#
plot(matrix.test[1:no.to.show, 1],   matrix.test[1:no.to.show, 2], col = "blue", xlim = c(0, 1), ylim = c(0, 1))#
#
# Plot the reference versus plink chumby#
#
points(matrix.test[1:no.to.show, 1],   matrix.test[1:no.to.show, 3], col = "red" )#
#
# Plot the reference versus so called true chumby#
#
points(matrix.test[1:no.to.show, 1],   matrix.test[1:no.to.show, 5], col = "green")
# Read in the freq from each of the data sets#
# -------------------------------------------#
#
chdwb.maf.post.imp     <- read.table("/Users/uqllloyd/Desktop/CAGE_impute_prob/CHDWB1_22_Post_Impute/DAT22.frq", header = T)#
ref.plink.freq         <- read.table("~/Desktop/CAGE_impute_prob/Hrs_Ref_Data/hrs_1kg_chr22.frq", header = T)#
ref.gcta.freq          <- read.table("~/Desktop/CAGE_impute_prob/Hrs_Ref_Data/hrs_1kg_hwe1e-6_chr22.freq", header = F)#
chdwb.plink.freq       <- read.table("~/Desktop/CAGE_impute_prob/CHDWB1_22/CHDWB1_22/CHDWB1_22.frq", header = T)#
chdwb.update.gcta.freq <- read.table("~/Desktop/CAGE_impute_prob/CHDWB1_22/CHDWB1_22_update.freq", header = F)#
# The original chromosome 22 file#
# -------------------------------#
#
orig.csv.file <- read.csv("~/Desktop/CAGE_impute_prob/CHDWB1_22_Orig/GG1_chr22.csv", header = T)#
snp.names <- orig.csv.file[ ,1]#
orig.csv.file <- t(orig.csv.file[, -1])#
snp.number <- 30#
snp.subset <- snp.names[1:snp.number]#
snp.subset <- snp.subset[order(snp.subset)]#
# Have a look at the original allele frequencies by hand#
# ------------------------------------------------------#
#
# Define two empty data frames#
#
first.snp.number.snps <- data.frame(matrix(ncol = 5, nrow = snp.number))#
first.snp.number.snps.2 <- data.frame(matrix(ncol = 7, nrow = snp.number))#
maf.true <- array(0, snp.number)#
#
# Cycle over the first snp.number snps and write out some stats#
#
# Use table to tally up the allele frequencies#
#
for (i in seq(1, snp.number)){#
#
table.out <- table(orig.csv.file[, i])#
print(c(as.character(snp.names[i]), table.out))#
table.out <- table.out[order(names(table.out))]#
#
if (length(which(names(table.out) == "--")) > 0) { #
	table.out <- table.out[-which(names(table.out) == "--")]#
	}#
#
if (length(table.out) == 3) {#
  num.allele.1 <- 2 * table.out[1] + table.out[2]#
  num.allele.2 <- 2 * table.out[3] + table.out[2]#
  } else if (length(table.out) == 1) {#
  num.allele.1  <- 2 * table.out[1] #
  num.allele.2  <- 0#
  } else {#
  num.allele.1  <- table.out[1] #
  num.allele.2 <- 2 * table.out[2] + table.out[1]#
  }#
#
af.1 <- num.allele.1 / (num.allele.1 + num.allele.2)#
af.2 <- num.allele.2 / (num.allele.1 + num.allele.2)#
#
first.snp.number.snps[i, 1] <- as.character(snp.names[i]) #
first.snp.number.snps[i, 2] <- names(af.1)#
first.snp.number.snps[i, 3] <- round(as.numeric(af.1), 4) #
first.snp.number.snps[i, 4] <- names(af.2)#
first.snp.number.snps[i, 5] <- round(as.numeric(af.2), 4)#
#
first.snp.number.snps.2[i, 1] <- as.character(snp.names[i]) #
first.snp.number.snps.2[i, 2] <- names(table.out)[1]#
first.snp.number.snps.2[i, 3] <- names(table.out)[2]#
first.snp.number.snps.2[i, 4] <- names(table.out)[3]#
first.snp.number.snps.2[i, 5] <- round(as.numeric(table.out[1]), 4)#
first.snp.number.snps.2[i, 6] <- round(as.numeric(table.out[2]), 4)#
first.snp.number.snps.2[i, 7] <- round(as.numeric(table.out[3]), 4)#
#
colnames(first.snp.number.snps)   <- c("SNP", "A1", "A1_freq", "A2", "A2_freq")#
colnames(first.snp.number.snps.2) <- c("SNP", "A1", "A12", "A2", "A1_Num", "A1_Num", "A1_Num")#
#
allele.freqs <- c(first.snp.number.snps[i, 3], first.snp.number.snps[i, 5])#
maf.true[i] <- allele.freqs[which(allele.freqs < 0.5 )]#
} #
# Pull out these SNPs and check their allele frequencies at diff stages of the data #
# processing#
# ---------------------------------------------------------------------------------#
# Reference from plink#
#
ref.plink.freq.snp.number <- ref.plink.freq[which(ref.plink.freq[ , 2] %in% first.snp.number.snps[, 1]), ]#
ref.plink.freq.snp.number <- ref.plink.freq.snp.number[order(ref.plink.freq.snp.number [, 2]), ]#
# Reference from gcta#
#
ref.gcta.freq.snp.number <- ref.gcta.freq[which(ref.gcta.freq[ , 1] %in% first.snp.number.snps[, 1]), ]#
ref.gcta.freq.snp.number <- ref.gcta.freq.snp.number[order(ref.gcta.freq.snp.number[, 1]), ]#
# Chumby data plink#
#
chdwb.plink.freq.snp.number <- chdwb.plink.freq[which(chdwb.plink.freq[ , 2] %in% first.snp.number.snps[, 1]), ]#
chdwb.plink.freq.snp.number <- chdwb.plink.freq.snp.number[order(chdwb.plink.freq.snp.number[, 2]), ]#
# Chumby data GCTA  #
#
chdwb.update.gcta.freq.snp.number <- chdwb.update.gcta.freq[chdwb.update.gcta.freq[ , 1] %in% first.snp.number.snps[, 1], ]#
chdwb.update.gcta.freq.snp.number <- chdwb.update.gcta.freq.snp.number[order(chdwb.update.gcta.freq.snp.number[, 1]), ]#
# Combine the reference MAF and SNP names for checking#
#
ref.plink.snps    <- as.character(ref.plink.freq.snp.number[ , 2])#
ref.plink.mafs    <- as.numeric(ref.plink.freq.snp.number[ , 5])#
#
ref.gcta.snps     <- as.character(ref.plink.freq.snp.number[ , 2])#
ref.gcta.mafs     <- as.numeric(ref.plink.freq.snp.number[ , 5])#
#
chdwb.plink.snps  <- as.character(chdwb.plink.freq.snp.number[ , 2])#
chdwb.plink.mafs  <- as.numeric(as.character(chdwb.plink.freq.snp.number[ ,5]))#
#
chdwb.gcta.snps   <- as.character(chdwb.update.gcta.freq.snp.number[ , 1])#
chdwb.gcta.mafs   <- as.numeric(chdwb.update.gcta.freq.snp.number[ , 3])#
# Are all the SNP in the reference in the reference ?#
#
length(which(ref.plink.snps %in% ref.gcta.snps)) == snp.number#
# Are all the SNPs in the reference in both CHDWB subsets ?#
#
length(which(ref.plink.snps %in% chdwb.gcta.snps))  == snp.number#
length(which(ref.plink.snps %in% chdwb.plink.snps)) == snp.number
which(ref.plink.snps %in% ref.gcta.snps)
ref.gcta.snps
ref.plink.snps
snp.names[1:snp.number]
which(ref.plink.snps %!in% ref.gcta.snps)
length(ref.gcta.snps)
length(ref.plink.freq.snp.number)
dim(ref.plink.freq.snp.number)
first.snp.number.snps
which(chdwb.plink.freq[ , 2] %in% first.snp.number.snps[, 1])
chdwb.plink.freq.snp.number
dim(chdwb.plink.freq.snp.number)
dim(ref.gcta.freq.snp.number)
dim(ref.plink.freq.snp.number)
dim(chdwb.update.gcta.freq.snp.number)
ref.gcta.freq
ref.gcta.freq.snp.number
ref.snps.sub <- ref.gcta.freq.snp.number[, 1]
# Reference from plink#
#
ref.plink.freq.snp.number <- ref.plink.freq[which(ref.plink.freq[ , 2] %in% first.snp.number.snps[, 1]), ]#
ref.plink.freq.snp.number <- ref.plink.freq.snp.number[order(ref.plink.freq.snp.number [, 2]), ]#
# Reference from gcta#
#
ref.gcta.freq.snp.number <- ref.gcta.freq[which(ref.gcta.freq[ , 1] %in% first.snp.number.snps[, 1]), ]#
ref.gcta.freq.snp.number <- ref.gcta.freq.snp.number[order(ref.gcta.freq.snp.number[, 1]), ]#
#
ref.snps.sub <- ref.gcta.freq.snp.number[, 1]#
# Chumby data plink#
#
chdwb.plink.freq.snp.number <- chdwb.plink.freq[which(chdwb.plink.freq[ , 2] %in% ref.snps.sub, ]#
chdwb.plink.freq.snp.number <- chdwb.plink.freq.snp.number[order(chdwb.plink.freq.snp.number[, 2]), ]#
# Chumby data GCTA  #
#
chdwb.update.gcta.freq.snp.number <- chdwb.update.gcta.freq[chdwb.update.gcta.freq[ , 1] %in% ref.snps.sub, ]#
chdwb.update.gcta.freq.snp.number <- chdwb.update.gcta.freq.snp.number[order(chdwb.update.gcta.freq.snp.number[, 1]), ]
chdwb.update.gcta.freq[ , 1] %in% ref.snps.sub
# Reference from plink#
#
ref.plink.freq.snp.number <- ref.plink.freq[which(ref.plink.freq[ , 2] %in% first.snp.number.snps[, 1]), ]#
ref.plink.freq.snp.number <- ref.plink.freq.snp.number[order(ref.plink.freq.snp.number [, 2]), ]#
# Reference from gcta#
#
ref.gcta.freq.snp.number <- ref.gcta.freq[which(ref.gcta.freq[ , 1] %in% first.snp.number.snps[, 1]), ]#
ref.gcta.freq.snp.number <- ref.gcta.freq.snp.number[order(ref.gcta.freq.snp.number[, 1]), ]#
#
ref.snps.sub <- ref.gcta.freq.snp.number[, 1]#
# Chumby data plink#
#
chdwb.plink.freq.snp.number <- chdwb.plink.freq[which(chdwb.plink.freq[ , 2] %in% ref.snps.sub), ]#
chdwb.plink.freq.snp.number <- chdwb.plink.freq.snp.number[order(chdwb.plink.freq.snp.number[, 2]), ]#
# Chumby data GCTA  #
#
chdwb.update.gcta.freq.snp.number <- chdwb.update.gcta.freq[which(chdwb.update.gcta.freq[ , 1] %in% ref.snps.sub), ]#
chdwb.update.gcta.freq.snp.number <- chdwb.update.gcta.freq.snp.number[order(chdwb.update.gcta.freq.snp.number[, 1]), ]
# Combine the reference MAF and SNP names for checking#
#
ref.plink.snps    <- as.character(ref.plink.freq.snp.number[ , 2])#
ref.plink.mafs    <- as.numeric(ref.plink.freq.snp.number[ , 5])#
#
ref.gcta.snps     <- as.character(ref.plink.freq.snp.number[ , 2])#
ref.gcta.mafs     <- as.numeric(ref.plink.freq.snp.number[ , 5])#
#
chdwb.plink.snps  <- as.character(chdwb.plink.freq.snp.number[ , 2])#
chdwb.plink.mafs  <- as.numeric(as.character(chdwb.plink.freq.snp.number[ ,5]))#
#
chdwb.gcta.snps   <- as.character(chdwb.update.gcta.freq.snp.number[ , 1])#
chdwb.gcta.mafs   <- as.numeric(chdwb.update.gcta.freq.snp.number[ , 3])
length(chdwb.plink.snps)
# Are all the SNP in the reference in the reference ?#
#
length(which(ref.plink.snps %in% ref.gcta.snps)) == snp.number#
# Are all the SNPs in the reference in both CHDWB subsets ?#
#
length(which(ref.plink.snps %in% chdwb.gcta.snps))  == snp.number#
length(which(ref.plink.snps %in% chdwb.plink.snps)) == snp.number
# Are all the SNP in the reference in the reference ?#
#
length(which(ref.plink.snps %in% ref.gcta.snps)) == length(ref.snps.sub)#
# Are all the SNPs in the reference in both CHDWB subsets ?#
#
length(which(ref.plink.snps %in% chdwb.gcta.snps))  == length(ref.snps.sub)#
length(which(ref.plink.snps %in% chdwb.plink.snps)) == length(ref.snps.sub)
# Build a matrix of all the allele frequencies for easy access#
#
matrix.test <- as.matrix(cbind(ref.plink.mafs, ref.gcta.mafs, chdwb.plink.mafs, chdwb.gcta.mafs, maf.true))#
#
# Plot the MAF from the original data against the reference#
#
no.to.show <- snp.number#
#
# Plot the reference versus itself just for a test#
#
plot(matrix.test[1:no.to.show, 1],   matrix.test[1:no.to.show, 2], col = "blue", xlim = c(0, 1), ylim = c(0, 1))#
#
# Plot the reference versus plink chumby#
#
points(matrix.test[1:no.to.show, 1],   matrix.test[1:no.to.show, 3], col = "red" )#
#
# Plot the reference versus so called true chumby#
#
points(matrix.test[1:no.to.show, 1],   matrix.test[1:no.to.show, 5], col = "green")
matrix.test
i = 26#
table.out <- table(orig.csv.file[, i])#
print(c(as.character(snp.names[i]), table.out))#
table.out <- table.out[order(names(table.out))]
# The original chromosome 22 file#
# -------------------------------#
#
orig.csv.file <- read.csv("~/Desktop/CAGE_impute_prob/CHDWB1_22_Orig/GG1_chr22.csv", header = T)#
snp.names <- orig.csv.file[ ,1]#
orig.csv.file <- t(orig.csv.file[, -1])#
snp.number <- 100#
snp.subset <- snp.names[1:snp.number]#
snp.subset <- snp.subset[order(snp.subset)]#
# Have a look at the original allele frequencies by hand#
# ------------------------------------------------------#
#
# Define two empty data frames#
#
first.snp.number.snps <- data.frame(matrix(ncol = 5, nrow = snp.number))#
first.snp.number.snps.2 <- data.frame(matrix(ncol = 7, nrow = snp.number))#
maf.true <- array(0, snp.number)#
#
# Cycle over the first snp.number snps and write out some stats#
#
# Use table to tally up the allele frequencies#
#
for (i in seq(1, snp.number)){#
#
#i = 26#
table.out <- table(orig.csv.file[, i])#
print(c(as.character(snp.names[i]), table.out))#
table.out <- table.out[order(names(table.out))]#
#
if (length(which(names(table.out) == "--")) > 0) { #
	table.out <- table.out[-which(names(table.out) == "--")]#
	}#
#
if (length(table.out) == 3) {#
  num.allele.1 <- 2 * table.out[1] + table.out[2]#
  num.allele.2 <- 2 * table.out[3] + table.out[2]#
  } else if (length(table.out) == 1) {#
  num.allele.1  <- 2 * table.out[1] #
  num.allele.2  <- 0#
  } else {#
  num.allele.1  <- table.out[1] #
  num.allele.2 <- 2 * table.out[2] + table.out[1]#
  }#
#
af.1 <- num.allele.1 / (num.allele.1 + num.allele.2)#
af.2 <- num.allele.2 / (num.allele.1 + num.allele.2)#
#
first.snp.number.snps[i, 1] <- as.character(snp.names[i]) #
first.snp.number.snps[i, 2] <- names(af.1)#
first.snp.number.snps[i, 3] <- round(as.numeric(af.1), 4) #
first.snp.number.snps[i, 4] <- names(af.2)#
first.snp.number.snps[i, 5] <- round(as.numeric(af.2), 4)#
#
first.snp.number.snps.2[i, 1] <- as.character(snp.names[i]) #
first.snp.number.snps.2[i, 2] <- names(table.out)[1]#
first.snp.number.snps.2[i, 3] <- names(table.out)[2]#
first.snp.number.snps.2[i, 4] <- names(table.out)[3]#
first.snp.number.snps.2[i, 5] <- round(as.numeric(table.out[1]), 4)#
first.snp.number.snps.2[i, 6] <- round(as.numeric(table.out[2]), 4)#
first.snp.number.snps.2[i, 7] <- round(as.numeric(table.out[3]), 4)#
#
colnames(first.snp.number.snps)   <- c("SNP", "A1", "A1_freq", "A2", "A2_freq")#
colnames(first.snp.number.snps.2) <- c("SNP", "A1", "A12", "A2", "A1_Num", "A1_Num", "A1_Num")#
#
allele.freqs <- c(first.snp.number.snps[i, 3], first.snp.number.snps[i, 5])#
maf.true[i] <- allele.freqs[which(allele.freqs < 0.5 )]#
} #
# Pull out these SNPs and check their allele frequencies at diff stages of the data #
# processing#
# ---------------------------------------------------------------------------------#
# Reference from plink#
#
ref.plink.freq.snp.number <- ref.plink.freq[which(ref.plink.freq[ , 2] %in% first.snp.number.snps[, 1]), ]#
ref.plink.freq.snp.number <- ref.plink.freq.snp.number[order(ref.plink.freq.snp.number [, 2]), ]#
# Reference from gcta#
#
ref.gcta.freq.snp.number <- ref.gcta.freq[which(ref.gcta.freq[ , 1] %in% first.snp.number.snps[, 1]), ]#
ref.gcta.freq.snp.number <- ref.gcta.freq.snp.number[order(ref.gcta.freq.snp.number[, 1]), ]#
#
ref.snps.sub <- ref.gcta.freq.snp.number[, 1]#
# Chumby data plink#
#
chdwb.plink.freq.snp.number <- chdwb.plink.freq[which(chdwb.plink.freq[ , 2] %in% ref.snps.sub), ]#
chdwb.plink.freq.snp.number <- chdwb.plink.freq.snp.number[order(chdwb.plink.freq.snp.number[, 2]), ]#
# Chumby data GCTA  #
#
chdwb.update.gcta.freq.snp.number <- chdwb.update.gcta.freq[which(chdwb.update.gcta.freq[ , 1] %in% ref.snps.sub), ]#
chdwb.update.gcta.freq.snp.number <- chdwb.update.gcta.freq.snp.number[order(chdwb.update.gcta.freq.snp.number[, 1]), ]#
# Combine the reference MAF and SNP names for checking#
#
ref.plink.snps    <- as.character(ref.plink.freq.snp.number[ , 2])#
ref.plink.mafs    <- as.numeric(ref.plink.freq.snp.number[ , 5])#
#
ref.gcta.snps     <- as.character(ref.plink.freq.snp.number[ , 2])#
ref.gcta.mafs     <- as.numeric(ref.plink.freq.snp.number[ , 5])#
#
chdwb.plink.snps  <- as.character(chdwb.plink.freq.snp.number[ , 2])#
chdwb.plink.mafs  <- as.numeric(as.character(chdwb.plink.freq.snp.number[ ,5]))#
#
chdwb.gcta.snps   <- as.character(chdwb.update.gcta.freq.snp.number[ , 1])#
chdwb.gcta.mafs   <- as.numeric(chdwb.update.gcta.freq.snp.number[ , 3])#
# Are all the SNP in the reference in the reference ?#
#
length(which(ref.plink.snps %in% ref.gcta.snps)) == length(ref.snps.sub)#
# Are all the SNPs in the reference in both CHDWB subsets ?#
#
length(which(ref.plink.snps %in% chdwb.gcta.snps))  == length(ref.snps.sub)#
length(which(ref.plink.snps %in% chdwb.plink.snps)) == length(ref.snps.sub)#
# Build a matrix of all the allele frequencies for easy access#
#
matrix.test <- as.matrix(cbind(ref.plink.mafs, ref.gcta.mafs, chdwb.plink.mafs, chdwb.gcta.mafs, maf.true))#
#
# Plot the MAF from the original data against the reference#
#
no.to.show <- snp.number#
#
# Plot the reference versus itself just for a test#
#
plot(matrix.test[1:no.to.show, 1],   matrix.test[1:no.to.show, 2], col = "blue", xlim = c(0, 1), ylim = c(0, 1))#
#
# Plot the reference versus plink chumby#
#
points(matrix.test[1:no.to.show, 1],   matrix.test[1:no.to.show, 3], col = "red" )#
#
# Plot the reference versus so called true chumby#
#
points(matrix.test[1:no.to.show, 1],   matrix.test[1:no.to.show, 5], col = "green")
# The original chromosome 22 file#
# -------------------------------#
#
orig.csv.file <- read.csv("~/Desktop/CAGE_impute_prob/CHDWB1_22_Orig/GG1_chr22.csv", header = T)#
snp.names <- orig.csv.file[ ,1]#
orig.csv.file <- t(orig.csv.file[, -1])#
snp.number <- 1000#
snp.subset <- snp.names[1:snp.number]#
snp.subset <- snp.subset[order(snp.subset)]#
# Have a look at the original allele frequencies by hand#
# ------------------------------------------------------#
#
# Define two empty data frames#
#
first.snp.number.snps <- data.frame(matrix(ncol = 5, nrow = snp.number))#
first.snp.number.snps.2 <- data.frame(matrix(ncol = 7, nrow = snp.number))#
maf.true <- array(0, snp.number)#
#
# Cycle over the first snp.number snps and write out some stats#
#
# Use table to tally up the allele frequencies#
#
for (i in seq(1, snp.number)){#
#
#i = 26#
table.out <- table(orig.csv.file[, i])#
print(c(as.character(snp.names[i]), table.out))#
table.out <- table.out[order(names(table.out))]#
#
if (length(which(names(table.out) == "--")) > 0) { #
	table.out <- table.out[-which(names(table.out) == "--")]#
	}#
#
if (length(table.out) == 3) {#
  num.allele.1 <- 2 * table.out[1] + table.out[2]#
  num.allele.2 <- 2 * table.out[3] + table.out[2]#
  } else if (length(table.out) == 1) {#
  num.allele.1  <- 2 * table.out[1] #
  num.allele.2  <- 0#
  } else {#
  num.allele.1  <- table.out[1] #
  num.allele.2 <- 2 * table.out[2] + table.out[1]#
  }#
#
af.1 <- num.allele.1 / (num.allele.1 + num.allele.2)#
af.2 <- num.allele.2 / (num.allele.1 + num.allele.2)#
#
first.snp.number.snps[i, 1] <- as.character(snp.names[i]) #
first.snp.number.snps[i, 2] <- names(af.1)#
first.snp.number.snps[i, 3] <- round(as.numeric(af.1), 4) #
first.snp.number.snps[i, 4] <- names(af.2)#
first.snp.number.snps[i, 5] <- round(as.numeric(af.2), 4)#
#
first.snp.number.snps.2[i, 1] <- as.character(snp.names[i]) #
first.snp.number.snps.2[i, 2] <- names(table.out)[1]#
first.snp.number.snps.2[i, 3] <- names(table.out)[2]#
first.snp.number.snps.2[i, 4] <- names(table.out)[3]#
first.snp.number.snps.2[i, 5] <- round(as.numeric(table.out[1]), 4)#
first.snp.number.snps.2[i, 6] <- round(as.numeric(table.out[2]), 4)#
first.snp.number.snps.2[i, 7] <- round(as.numeric(table.out[3]), 4)#
#
colnames(first.snp.number.snps)   <- c("SNP", "A1", "A1_freq", "A2", "A2_freq")#
colnames(first.snp.number.snps.2) <- c("SNP", "A1", "A12", "A2", "A1_Num", "A1_Num", "A1_Num")#
#
allele.freqs <- c(first.snp.number.snps[i, 3], first.snp.number.snps[i, 5])#
maf.true[i] <- allele.freqs[which(allele.freqs < 0.5 )]#
} #
# Pull out these SNPs and check their allele frequencies at diff stages of the data #
# processing#
# ---------------------------------------------------------------------------------#
# Reference from plink#
#
ref.plink.freq.snp.number <- ref.plink.freq[which(ref.plink.freq[ , 2] %in% first.snp.number.snps[, 1]), ]#
ref.plink.freq.snp.number <- ref.plink.freq.snp.number[order(ref.plink.freq.snp.number [, 2]), ]#
# Reference from gcta#
#
ref.gcta.freq.snp.number <- ref.gcta.freq[which(ref.gcta.freq[ , 1] %in% first.snp.number.snps[, 1]), ]#
ref.gcta.freq.snp.number <- ref.gcta.freq.snp.number[order(ref.gcta.freq.snp.number[, 1]), ]#
#
ref.snps.sub <- ref.gcta.freq.snp.number[, 1]#
# Chumby data plink#
#
chdwb.plink.freq.snp.number <- chdwb.plink.freq[which(chdwb.plink.freq[ , 2] %in% ref.snps.sub), ]#
chdwb.plink.freq.snp.number <- chdwb.plink.freq.snp.number[order(chdwb.plink.freq.snp.number[, 2]), ]#
# Chumby data GCTA  #
#
chdwb.update.gcta.freq.snp.number <- chdwb.update.gcta.freq[which(chdwb.update.gcta.freq[ , 1] %in% ref.snps.sub), ]#
chdwb.update.gcta.freq.snp.number <- chdwb.update.gcta.freq.snp.number[order(chdwb.update.gcta.freq.snp.number[, 1]), ]#
# Combine the reference MAF and SNP names for checking#
#
ref.plink.snps    <- as.character(ref.plink.freq.snp.number[ , 2])#
ref.plink.mafs    <- as.numeric(ref.plink.freq.snp.number[ , 5])#
#
ref.gcta.snps     <- as.character(ref.plink.freq.snp.number[ , 2])#
ref.gcta.mafs     <- as.numeric(ref.plink.freq.snp.number[ , 5])#
#
chdwb.plink.snps  <- as.character(chdwb.plink.freq.snp.number[ , 2])#
chdwb.plink.mafs  <- as.numeric(as.character(chdwb.plink.freq.snp.number[ ,5]))#
#
chdwb.gcta.snps   <- as.character(chdwb.update.gcta.freq.snp.number[ , 1])#
chdwb.gcta.mafs   <- as.numeric(chdwb.update.gcta.freq.snp.number[ , 3])#
# Are all the SNP in the reference in the reference ?#
#
length(which(ref.plink.snps %in% ref.gcta.snps)) == length(ref.snps.sub)#
# Are all the SNPs in the reference in both CHDWB subsets ?#
#
length(which(ref.plink.snps %in% chdwb.gcta.snps))  == length(ref.snps.sub)#
length(which(ref.plink.snps %in% chdwb.plink.snps)) == length(ref.snps.sub)#
# Build a matrix of all the allele frequencies for easy access#
#
matrix.test <- as.matrix(cbind(ref.plink.mafs, ref.gcta.mafs, chdwb.plink.mafs, chdwb.gcta.mafs, maf.true))#
#
# Plot the MAF from the original data against the reference#
#
no.to.show <- snp.number#
#
# Plot the reference versus itself just for a test#
#
plot(matrix.test[1:no.to.show, 1],   matrix.test[1:no.to.show, 2], col = "blue", xlim = c(0, 1), ylim = c(0, 1))#
#
# Plot the reference versus plink chumby#
#
points(matrix.test[1:no.to.show, 1],   matrix.test[1:no.to.show, 3], col = "red" )#
#
# Plot the reference versus so called true chumby#
#
points(matrix.test[1:no.to.show, 1],   matrix.test[1:no.to.show, 5], col = "green")
maf.true
dim(orig.csv.file)
orig.csv.file[, i]
# The original chromosome 22 file#
# -------------------------------#
#
orig.csv.file <- read.csv("~/Desktop/CAGE_impute_prob/CHDWB1_22_Orig/GG1_chr22.csv", header = T)#
snp.names <- orig.csv.file[ ,1]#
orig.csv.file <- t(orig.csv.file[, -1])#
snp.number <- 20#
snp.subset <- snp.names[1:snp.number]#
snp.subset <- snp.subset[order(snp.subset)]#
# Have a look at the original allele frequencies by hand#
# ------------------------------------------------------#
#
# Define two empty data frames#
#
first.snp.number.snps <- data.frame(matrix(ncol = 5, nrow = snp.number))#
first.snp.number.snps.2 <- data.frame(matrix(ncol = 7, nrow = snp.number))#
maf.true <- array(0, snp.number)#
#
# Cycle over the first snp.number snps and write out some stats#
#
# Use table to tally up the allele frequencies#
#
for (i in seq(1, snp.number)){#
#
#i = 26#
table.out <- table(orig.csv.file[, i])#
print(c(as.character(snp.names[i]), table.out))#
table.out <- table.out[order(names(table.out))]#
#
if (length(which(names(table.out) == "--")) > 0) { #
	table.out <- table.out[-which(names(table.out) == "--")]#
	}#
#
if (length(table.out) == 3) {#
  num.allele.1 <- 2 * table.out[1] + table.out[2]#
  num.allele.2 <- 2 * table.out[3] + table.out[2]#
  } else if (length(table.out) == 1) {#
  num.allele.1  <- 2 * table.out[1] #
  num.allele.2  <- 0#
  } else {#
  num.allele.1  <- table.out[1] #
  num.allele.2 <- 2 * table.out[2] + table.out[1]#
  }#
#
af.1 <- num.allele.1 / (num.allele.1 + num.allele.2)#
af.2 <- num.allele.2 / (num.allele.1 + num.allele.2)#
#
first.snp.number.snps[i, 1] <- as.character(snp.names[i]) #
first.snp.number.snps[i, 2] <- names(af.1)#
first.snp.number.snps[i, 3] <- round(as.numeric(af.1), 4) #
first.snp.number.snps[i, 4] <- names(af.2)#
first.snp.number.snps[i, 5] <- round(as.numeric(af.2), 4)#
#
first.snp.number.snps.2[i, 1] <- as.character(snp.names[i]) #
first.snp.number.snps.2[i, 2] <- names(table.out)[1]#
first.snp.number.snps.2[i, 3] <- names(table.out)[2]#
first.snp.number.snps.2[i, 4] <- names(table.out)[3]#
first.snp.number.snps.2[i, 5] <- round(as.numeric(table.out[1]), 4)#
first.snp.number.snps.2[i, 6] <- round(as.numeric(table.out[2]), 4)#
first.snp.number.snps.2[i, 7] <- round(as.numeric(table.out[3]), 4)#
#
colnames(first.snp.number.snps)   <- c("SNP", "A1", "A1_freq", "A2", "A2_freq")#
colnames(first.snp.number.snps.2) <- c("SNP", "A1", "A12", "A2", "A1_Num", "A1_Num", "A1_Num")#
#
allele.freqs <- c(first.snp.number.snps[i, 3], first.snp.number.snps[i, 5])#
maf.true[i] <- allele.freqs[which(allele.freqs < 0.5 )]#
}
orig.csv.file[, 14]
read.plink <- function(root)#
{#
  bed.file = paste(root, ".bed", sep = "")#
  bed.file.size = file.info(bed.file)$size#
  sample.size = dim(read.table(paste(root, ".fam", sep = "")))[1]#
  snp.size = ceiling(sample.size/4)#
  n.snps = round((bed.file.size - 3)/snp.size)#
  bin.connection = file(bed.file, "rb")#
  test.bytes = readBin(bin.connection, what = "raw", n = 3)#
  if (!identical(as.character(test.bytes), c("6c", "1b", "01"))) {#
    stop("BED file not a v0.99 SNP-major BED file, please re-encode the data as v0.99 SNP-major file")#
  }#
  genotypes = matrix(ncol = n.snps, nrow = sample.size)#
  for (i in 1:n.snps) {#
    r.bin.snp = readBin(bin.connection, what = "raw", n = snp.size)#
    bin.snp = matrix(as.numeric(rawToBits(r.bin.snp)), ncol = 2,#
                     byrow = TRUE)[1:sample.size, ]#
    genotypes[, i] = bin.snp[, 1] + bin.snp[, 2] - 10 * ((bin.snp[,#
                                                                  1] == 1) & (bin.snp[, 2] == 0))#
  }#
  genotypes[genotypes == -9] = NA#
  #snp.names = read.table(paste(root, ".bim", sep = ""))[, 2]#
  #colnames(genotypes) = snp.names#
  close(bin.connection)#
  return(genotypes)#
}
CHDWB1 <- read.plink("~/Desktop/CAGE_impute_prob/CHDWB1_22/CHDWB1_22/CHDWB1_22")
str(CHDWB1)
CHDWB1[1:10, 1:10]
CHDWB1.bed <- read.table("~/Desktop/CAGE_impute_prob/CHDWB1_22/CHDWB1_22/CHDWB1_22", header = T)
CHDWB1.bed <- read.table("~/Desktop/CAGE_impute_prob/CHDWB1_22/CHDWB1_22/CHDWB1_22.bim", header = T)
CHDWB1.bed <- read.plink("~/Desktop/CAGE_impute_prob/CHDWB1_22/CHDWB1_22/CHDWB1_22")
CHDWB1.bim <- read.table("~/Desktop/CAGE_impute_prob/CHDWB1_22/CHDWB1_22/CHDWB1_22.bim", header = T)
CHDWB1.bim[1;10]
CHDWB1.bim[1:10]
CHDWB1.bim[1:10, ]
order(CHDWB1.bim[, 2])
CHDWB1.bim[order(CHDWB1.bim[, 2]), 2]
order(CHDWB1.bim[, 2])
# The original chromosome 22 file#
# -------------------------------#
#
orig.csv.file <- read.csv("~/Desktop/CAGE_impute_prob/CHDWB1_22_Orig/GG1_chr22.csv", header = T)#
snp.names <- orig.csv.file[ ,1]#
orig.csv.file <- t(orig.csv.file[, -1])#
snp.number <- 20#
snp.subset <- snp.names[1:snp.number]#
snp.subset <- snp.subset[order(snp.subset)]#
# Have a look at the original allele frequencies by hand#
# ------------------------------------------------------#
#
# Define two empty data frames#
#
first.snp.number.snps <- data.frame(matrix(ncol = 5, nrow = snp.number))#
first.snp.number.snps.2 <- data.frame(matrix(ncol = 7, nrow = snp.number))#
maf.true <- array(0, snp.number)#
#
# Cycle over the first snp.number snps and write out some stats#
#
# Use table to tally up the allele frequencies#
#
for (i in seq(1, snp.number)){#
#
#i = 26#
table.out <- table(orig.csv.file[, i])#
print(c(as.character(snp.names[i]), table.out))#
table.out <- table.out[order(names(table.out))]#
#
if (length(which(names(table.out) == "--")) > 0) { #
	table.out <- table.out[-which(names(table.out) == "--")]#
	}#
#
if (length(table.out) == 3) {#
  num.allele.1 <- 2 * table.out[1] + table.out[2]#
  num.allele.2 <- 2 * table.out[3] + table.out[2]#
  } else if (length(table.out) == 1) {#
  num.allele.1  <- 2 * table.out[1] #
  num.allele.2  <- 0#
  } else {#
  num.allele.1  <- table.out[1] #
  num.allele.2 <- 2 * table.out[2] + table.out[1]#
  }#
#
af.1 <- num.allele.1 / (num.allele.1 + num.allele.2)#
af.2 <- num.allele.2 / (num.allele.1 + num.allele.2)#
#
first.snp.number.snps[i, 1] <- as.character(snp.names[i]) #
first.snp.number.snps[i, 2] <- names(af.1)#
first.snp.number.snps[i, 3] <- round(as.numeric(af.1), 4) #
first.snp.number.snps[i, 4] <- names(af.2)#
first.snp.number.snps[i, 5] <- round(as.numeric(af.2), 4)#
#
first.snp.number.snps.2[i, 1] <- as.character(snp.names[i]) #
first.snp.number.snps.2[i, 2] <- names(table.out)[1]#
first.snp.number.snps.2[i, 3] <- names(table.out)[2]#
first.snp.number.snps.2[i, 4] <- names(table.out)[3]#
first.snp.number.snps.2[i, 5] <- round(as.numeric(table.out[1]), 4)#
first.snp.number.snps.2[i, 6] <- round(as.numeric(table.out[2]), 4)#
first.snp.number.snps.2[i, 7] <- round(as.numeric(table.out[3]), 4)#
#
colnames(first.snp.number.snps)   <- c("SNP", "A1", "A1_freq", "A2", "A2_freq")#
colnames(first.snp.number.snps.2) <- c("SNP", "A1", "A12", "A2", "A1_Num", "A1_Num", "A1_Num")#
#
allele.freqs <- c(first.snp.number.snps[i, 3], first.snp.number.snps[i, 5])#
maf.true[i] <- allele.freqs[which(allele.freqs < 0.5 )]#
} #
# Pull out these SNPs and check their allele frequencies at diff stages of the data #
# processing#
# ---------------------------------------------------------------------------------#
# Reference from plink#
#
ref.plink.freq.snp.number <- ref.plink.freq[which(ref.plink.freq[ , 2] %in% first.snp.number.snps[, 1]), ]#
ref.plink.freq.snp.number <- ref.plink.freq.snp.number[order(ref.plink.freq.snp.number [, 2]), ]#
# Reference from gcta#
#
ref.gcta.freq.snp.number <- ref.gcta.freq[which(ref.gcta.freq[ , 1] %in% first.snp.number.snps[, 1]), ]#
ref.gcta.freq.snp.number <- ref.gcta.freq.snp.number[order(ref.gcta.freq.snp.number[, 1]), ]#
#
ref.snps.sub <- ref.gcta.freq.snp.number[, 1]#
# Chumby data plink#
#
chdwb.plink.freq.snp.number <- chdwb.plink.freq[which(chdwb.plink.freq[ , 2] %in% ref.snps.sub), ]#
chdwb.plink.freq.snp.number <- chdwb.plink.freq.snp.number[order(chdwb.plink.freq.snp.number[, 2]), ]#
# Chumby data GCTA  #
#
chdwb.update.gcta.freq.snp.number <- chdwb.update.gcta.freq[which(chdwb.update.gcta.freq[ , 1] %in% ref.snps.sub), ]#
chdwb.update.gcta.freq.snp.number <- chdwb.update.gcta.freq.snp.number[order(chdwb.update.gcta.freq.snp.number[, 1]), ]#
# Combine the reference MAF and SNP names for checking#
#
ref.plink.snps    <- as.character(ref.plink.freq.snp.number[ , 2])#
ref.plink.mafs    <- as.numeric(ref.plink.freq.snp.number[ , 5])#
#
ref.gcta.snps     <- as.character(ref.plink.freq.snp.number[ , 2])#
ref.gcta.mafs     <- as.numeric(ref.plink.freq.snp.number[ , 5])#
#
chdwb.plink.snps  <- as.character(chdwb.plink.freq.snp.number[ , 2])#
chdwb.plink.mafs  <- as.numeric(as.character(chdwb.plink.freq.snp.number[ ,5]))#
#
chdwb.gcta.snps   <- as.character(chdwb.update.gcta.freq.snp.number[ , 1])#
chdwb.gcta.mafs   <- as.numeric(chdwb.update.gcta.freq.snp.number[ , 3])#
# Are all the SNP in the reference in the reference ?#
#
length(which(ref.plink.snps %in% ref.gcta.snps)) == length(ref.snps.sub)#
# Are all the SNPs in the reference in both CHDWB subsets ?#
#
length(which(ref.plink.snps %in% chdwb.gcta.snps))  == length(ref.snps.sub)#
length(which(ref.plink.snps %in% chdwb.plink.snps)) == length(ref.snps.sub)#
# Build a matrix of all the allele frequencies for easy access#
#
matrix.test <- as.matrix(cbind(ref.plink.mafs, ref.gcta.mafs, chdwb.plink.mafs, chdwb.gcta.mafs, maf.true))#
#
# Plot the MAF from the original data against the reference#
#
no.to.show <- snp.number#
#
# Plot the reference versus itself just for a test#
#
plot(matrix.test[1:no.to.show, 1],   matrix.test[1:no.to.show, 2], col = "blue", xlim = c(0, 1), ylim = c(0, 1))#
#
# Plot the reference versus plink chumby#
#
points(matrix.test[1:no.to.show, 1],   matrix.test[1:no.to.show, 3], col = "red" )#
#
# Plot the reference versus so called true chumby#
#
points(matrix.test[1:no.to.show, 1],   matrix.test[1:no.to.show, 5], col = "green")
# Read in the freq from each of the data sets#
# -------------------------------------------#
#
chdwb.maf.post.imp     <- read.table("/Users/uqllloyd/Desktop/CAGE_impute_prob/CHDWB1_22_Post_Impute/DAT22.frq", header = T)#
ref.plink.freq         <- read.table("~/Desktop/CAGE_impute_prob/Hrs_Ref_Data/hrs_1kg_chr22.frq", header = T)#
ref.gcta.freq          <- read.table("~/Desktop/CAGE_impute_prob/Hrs_Ref_Data/hrs_1kg_hwe1e-6_chr22.freq", header = F)#
chdwb.plink.freq       <- read.table("~/Desktop/CAGE_impute_prob/CHDWB1_22/CHDWB1_22/CHDWB1_22.frq", header = T)#
chdwb.update.gcta.freq <- read.table("~/Desktop/CAGE_impute_prob/CHDWB1_22/CHDWB1_22_update.freq", header = F)#
# The original chromosome 22 file#
# -------------------------------#
#
orig.csv.file <- read.csv("~/Desktop/CAGE_impute_prob/CHDWB1_22_Orig/GG1_chr22.csv", header = T)#
snp.names <- orig.csv.file[ ,1]#
orig.csv.file <- t(orig.csv.file[, -1])#
snp.number <- 200#
snp.subset <- snp.names[1:snp.number]#
snp.subset <- snp.subset[order(snp.subset)]#
# Have a look at the original allele frequencies by hand#
# ------------------------------------------------------#
#
# Define two empty data frames#
#
first.snp.number.snps <- data.frame(matrix(ncol = 5, nrow = snp.number))#
first.snp.number.snps.2 <- data.frame(matrix(ncol = 7, nrow = snp.number))#
maf.true <- array(0, snp.number)#
#
# Cycle over the first snp.number snps and write out some stats#
#
# Use table to tally up the allele frequencies#
#
for (i in seq(1, snp.number)){#
#
#i = 26#
table.out <- table(orig.csv.file[, i])#
print(c(as.character(snp.names[i]), table.out))#
table.out <- table.out[order(names(table.out))]#
#
if (length(which(names(table.out) == "--")) > 0) { #
	table.out <- table.out[-which(names(table.out) == "--")]#
	}#
#
if (length(table.out) == 3) {#
  num.allele.1 <- 2 * table.out[1] + table.out[2]#
  num.allele.2 <- 2 * table.out[3] + table.out[2]#
  } else if (length(table.out) == 1) {#
  num.allele.1  <- 2 * table.out[1] #
  num.allele.2  <- 0#
  } else {#
  num.allele.1  <- table.out[1] #
  num.allele.2 <- 2 * table.out[2] + table.out[1]#
  }#
#
af.1 <- num.allele.1 / (num.allele.1 + num.allele.2)#
af.2 <- num.allele.2 / (num.allele.1 + num.allele.2)#
#
first.snp.number.snps[i, 1] <- as.character(snp.names[i]) #
first.snp.number.snps[i, 2] <- names(af.1)#
first.snp.number.snps[i, 3] <- round(as.numeric(af.1), 4) #
first.snp.number.snps[i, 4] <- names(af.2)#
first.snp.number.snps[i, 5] <- round(as.numeric(af.2), 4)#
#
first.snp.number.snps.2[i, 1] <- as.character(snp.names[i]) #
first.snp.number.snps.2[i, 2] <- names(table.out)[1]#
first.snp.number.snps.2[i, 3] <- names(table.out)[2]#
first.snp.number.snps.2[i, 4] <- names(table.out)[3]#
first.snp.number.snps.2[i, 5] <- round(as.numeric(table.out[1]), 4)#
first.snp.number.snps.2[i, 6] <- round(as.numeric(table.out[2]), 4)#
first.snp.number.snps.2[i, 7] <- round(as.numeric(table.out[3]), 4)#
#
colnames(first.snp.number.snps)   <- c("SNP", "A1", "A1_freq", "A2", "A2_freq")#
colnames(first.snp.number.snps.2) <- c("SNP", "A1", "A12", "A2", "A1_Num", "A1_Num", "A1_Num")#
#
allele.freqs <- c(first.snp.number.snps[i, 3], first.snp.number.snps[i, 5])#
maf.true[i] <- allele.freqs[which(allele.freqs < 0.5 )]#
} #
# Pull out these SNPs and check their allele frequencies at diff stages of the data #
# processing#
# ---------------------------------------------------------------------------------#
# Reference from plink#
#
ref.plink.freq.snp.number <- ref.plink.freq[which(ref.plink.freq[ , 2] %in% first.snp.number.snps[, 1]), ]#
ref.plink.freq.snp.number <- ref.plink.freq.snp.number[order(ref.plink.freq.snp.number [, 2]), ]#
# Reference from gcta#
#
ref.gcta.freq.snp.number <- ref.gcta.freq[which(ref.gcta.freq[ , 1] %in% first.snp.number.snps[, 1]), ]#
ref.gcta.freq.snp.number <- ref.gcta.freq.snp.number[order(ref.gcta.freq.snp.number[, 1]), ]#
#
ref.snps.sub <- ref.gcta.freq.snp.number[, 1]#
# Chumby data plink#
#
chdwb.plink.freq.snp.number <- chdwb.plink.freq[which(chdwb.plink.freq[ , 2] %in% ref.snps.sub), ]#
chdwb.plink.freq.snp.number <- chdwb.plink.freq.snp.number[order(chdwb.plink.freq.snp.number[, 2]), ]#
# Chumby data GCTA  #
#
chdwb.update.gcta.freq.snp.number <- chdwb.update.gcta.freq[which(chdwb.update.gcta.freq[ , 1] %in% ref.snps.sub), ]#
chdwb.update.gcta.freq.snp.number <- chdwb.update.gcta.freq.snp.number[order(chdwb.update.gcta.freq.snp.number[, 1]), ]#
# Combine the reference MAF and SNP names for checking#
#
ref.plink.snps    <- as.character(ref.plink.freq.snp.number[ , 2])#
ref.plink.mafs    <- as.numeric(ref.plink.freq.snp.number[ , 5])#
#
ref.gcta.snps     <- as.character(ref.plink.freq.snp.number[ , 2])#
ref.gcta.mafs     <- as.numeric(ref.plink.freq.snp.number[ , 5])#
#
chdwb.plink.snps  <- as.character(chdwb.plink.freq.snp.number[ , 2])#
chdwb.plink.mafs  <- as.numeric(as.character(chdwb.plink.freq.snp.number[ ,5]))#
#
chdwb.gcta.snps   <- as.character(chdwb.update.gcta.freq.snp.number[ , 1])#
chdwb.gcta.mafs   <- as.numeric(chdwb.update.gcta.freq.snp.number[ , 3])#
# Are all the SNP in the reference in the reference ?#
#
length(which(ref.plink.snps %in% ref.gcta.snps)) == length(ref.snps.sub)#
# Are all the SNPs in the reference in both CHDWB subsets ?#
#
length(which(ref.plink.snps %in% chdwb.gcta.snps))  == length(ref.snps.sub)#
length(which(ref.plink.snps %in% chdwb.plink.snps)) == length(ref.snps.sub)#
# Build a matrix of all the allele frequencies for easy access#
#
matrix.test <- as.matrix(cbind(ref.plink.mafs, ref.gcta.mafs, chdwb.plink.mafs, chdwb.gcta.mafs, maf.true))#
#
# Plot the MAF from the original data against the reference#
#
no.to.show <- snp.number#
#
# Plot the reference versus itself just for a test#
#
plot(matrix.test[1:no.to.show, 1],   matrix.test[1:no.to.show, 2], col = "blue", xlim = c(0, 1), ylim = c(0, 1))#
#
# Plot the reference versus plink chumby#
#
points(matrix.test[1:no.to.show, 1],   matrix.test[1:no.to.show, 3], col = "red" )#
#
# Plot the reference versus so called true chumby#
#
points(matrix.test[1:no.to.show, 1],   matrix.test[1:no.to.show, 5], col = "green")
matrix.test
chdwb.update.gcta.freq.snp.number
chdwb.update.gcta.freq.snp.number[1:10, ]
head(chdwb.plink.freq.snp.number )
head(ref.gcta.freq.snp.number)
head(ref.plink.freq.snp.number)
which(ref.plink.snps %in% ref.gcta.snps)
length(ref.snps.sub)
first.snp.number.snps[, 1]
# The original chromosome 22 file#
# -------------------------------#
#
orig.csv.file <- read.csv("~/Desktop/CAGE_impute_prob/CHDWB1_22_Orig/GG1_chr22.csv", header = T)#
snp.names <- orig.csv.file[ ,1]#
orig.csv.file <- t(orig.csv.file[, -1])#
snp.number <- 20#
snp.subset <- snp.names[1:snp.number]#
snp.subset <- snp.subset[order(snp.subset)]#
# Have a look at the original allele frequencies by hand#
# ------------------------------------------------------#
#
# Define two empty data frames#
#
first.snp.number.snps <- data.frame(matrix(ncol = 5, nrow = snp.number))#
first.snp.number.snps.2 <- data.frame(matrix(ncol = 7, nrow = snp.number))#
maf.true <- array(0, snp.number)#
#
# Cycle over the first snp.number snps and write out some stats#
#
# Use table to tally up the allele frequencies#
#
for (i in seq(1, snp.number)){#
#
#i = 26#
table.out <- table(orig.csv.file[, i])#
print(c(as.character(snp.names[i]), table.out))#
table.out <- table.out[order(names(table.out))]#
#
if (length(which(names(table.out) == "--")) > 0) { #
	table.out <- table.out[-which(names(table.out) == "--")]#
	}#
#
if (length(table.out) == 3) {#
  num.allele.1 <- 2 * table.out[1] + table.out[2]#
  num.allele.2 <- 2 * table.out[3] + table.out[2]#
  } else if (length(table.out) == 1) {#
  num.allele.1  <- 2 * table.out[1] #
  num.allele.2  <- 0#
  } else {#
  num.allele.1  <- table.out[1] #
  num.allele.2 <- 2 * table.out[2] + table.out[1]#
  }#
#
af.1 <- num.allele.1 / (num.allele.1 + num.allele.2)#
af.2 <- num.allele.2 / (num.allele.1 + num.allele.2)#
#
first.snp.number.snps[i, 1] <- as.character(snp.names[i]) #
first.snp.number.snps[i, 2] <- names(af.1)#
first.snp.number.snps[i, 3] <- round(as.numeric(af.1), 4) #
first.snp.number.snps[i, 4] <- names(af.2)#
first.snp.number.snps[i, 5] <- round(as.numeric(af.2), 4)#
#
first.snp.number.snps.2[i, 1] <- as.character(snp.names[i]) #
first.snp.number.snps.2[i, 2] <- names(table.out)[1]#
first.snp.number.snps.2[i, 3] <- names(table.out)[2]#
first.snp.number.snps.2[i, 4] <- names(table.out)[3]#
first.snp.number.snps.2[i, 5] <- round(as.numeric(table.out[1]), 4)#
first.snp.number.snps.2[i, 6] <- round(as.numeric(table.out[2]), 4)#
first.snp.number.snps.2[i, 7] <- round(as.numeric(table.out[3]), 4)#
#
colnames(first.snp.number.snps)   <- c("SNP", "A1", "A1_freq", "A2", "A2_freq")#
colnames(first.snp.number.snps.2) <- c("SNP", "A1", "A12", "A2", "A1_Num", "A1_Num", "A1_Num")#
#
allele.freqs <- c(first.snp.number.snps[i, 3], first.snp.number.snps[i, 5])#
maf.true[i] <- allele.freqs[which(allele.freqs < 0.5 )]#
} #
# Pull out these SNPs and check their allele frequencies at diff stages of the data #
# processing#
# ---------------------------------------------------------------------------------#
# Reference from plink#
#
ref.plink.freq.snp.number <- ref.plink.freq[which(ref.plink.freq[ , 2] %in% first.snp.number.snps[, 1]), ]#
ref.plink.freq.snp.number <- ref.plink.freq.snp.number[order(ref.plink.freq.snp.number [, 2], decreasing = T), ]#
# Reference from gcta#
#
ref.gcta.freq.snp.number <- ref.gcta.freq[which(ref.gcta.freq[ , 1] %in% first.snp.number.snps[, 1]), ]#
ref.gcta.freq.snp.number <- ref.gcta.freq.snp.number[order(ref.gcta.freq.snp.number[, 1], decreasing = T), ]#
#
ref.snps.sub <- ref.gcta.freq.snp.number[, 1]#
# Chumby data plink#
#
chdwb.plink.freq.snp.number <- chdwb.plink.freq[which(chdwb.plink.freq[ , 2] %in% ref.snps.sub), ]#
chdwb.plink.freq.snp.number <- chdwb.plink.freq.snp.number[order(chdwb.plink.freq.snp.number[, 2], decreasing = T), ]#
# Chumby data GCTA  #
#
chdwb.update.gcta.freq.snp.number <- chdwb.update.gcta.freq[which(chdwb.update.gcta.freq[ , 1] %in% ref.snps.sub), ]#
chdwb.update.gcta.freq.snp.number <- chdwb.update.gcta.freq.snp.number[order(chdwb.update.gcta.freq.snp.number[, 1], decreasing = T), ]#
# Combine the reference MAF and SNP names for checking#
#
ref.plink.snps    <- as.character(ref.plink.freq.snp.number[ , 2])#
ref.plink.mafs    <- as.numeric(ref.plink.freq.snp.number[ , 5])#
#
ref.gcta.snps     <- as.character(ref.plink.freq.snp.number[ , 2])#
ref.gcta.mafs     <- as.numeric(ref.plink.freq.snp.number[ , 5])#
#
chdwb.plink.snps  <- as.character(chdwb.plink.freq.snp.number[ , 2])#
chdwb.plink.mafs  <- as.numeric(as.character(chdwb.plink.freq.snp.number[ ,5]))#
#
chdwb.gcta.snps   <- as.character(chdwb.update.gcta.freq.snp.number[ , 1])#
chdwb.gcta.mafs   <- as.numeric(chdwb.update.gcta.freq.snp.number[ , 3])#
# Are all the SNP in the reference in the reference ?#
#
length(which(ref.plink.snps %in% ref.gcta.snps)) == length(ref.snps.sub)#
# Are all the SNPs in the reference in both CHDWB subsets ?#
#
length(which(ref.plink.snps %in% chdwb.gcta.snps))  == length(ref.snps.sub)#
length(which(ref.plink.snps %in% chdwb.plink.snps)) == length(ref.snps.sub)#
# Build a matrix of all the allele frequencies for easy access#
#
matrix.test <- as.matrix(cbind(ref.plink.mafs, ref.gcta.mafs, chdwb.plink.mafs, chdwb.gcta.mafs, maf.true))#
#
# Plot the MAF from the original data against the reference#
#
no.to.show <- snp.number#
#
# Plot the reference versus itself just for a test#
#
plot(matrix.test[1:no.to.show, 1],   matrix.test[1:no.to.show, 2], col = "blue", xlim = c(0, 1), ylim = c(0, 1))#
#
# Plot the reference versus plink chumby#
#
points(matrix.test[1:no.to.show, 1],   matrix.test[1:no.to.show, 3], col = "red" )#
#
# Plot the reference versus so called true chumby#
#
points(matrix.test[1:no.to.show, 1],   matrix.test[1:no.to.show, 5], col = "green")
matrix.test
orig.csv.file <- read.csv("~/Desktop/CAGE_impute_prob/CHDWB1_22_Orig/GG1_chr22.csv", header = T)#
snp.names <- orig.csv.file[ ,1]#
orig.csv.file <- t(orig.csv.file[, -1])#
snp.number <- 200#
snp.subset <- snp.names[1:snp.number]#
snp.subset <- snp.subset[order(snp.subset)]#
# Have a look at the original allele frequencies by hand#
# ------------------------------------------------------#
#
# Define two empty data frames#
#
first.snp.number.snps <- data.frame(matrix(ncol = 5, nrow = snp.number))#
first.snp.number.snps.2 <- data.frame(matrix(ncol = 7, nrow = snp.number))#
maf.true <- array(0, snp.number)#
#
# Cycle over the first snp.number snps and write out some stats#
#
# Use table to tally up the allele frequencies#
#
for (i in seq(1, snp.number)){#
#
#i = 26#
table.out <- table(orig.csv.file[, i])#
print(c(as.character(snp.names[i]), table.out))#
table.out <- table.out[order(names(table.out))]#
#
if (length(which(names(table.out) == "--")) > 0) { #
	table.out <- table.out[-which(names(table.out) == "--")]#
	}#
#
if (length(table.out) == 3) {#
  num.allele.1 <- 2 * table.out[1] + table.out[2]#
  num.allele.2 <- 2 * table.out[3] + table.out[2]#
  } else if (length(table.out) == 1) {#
  num.allele.1  <- 2 * table.out[1] #
  num.allele.2  <- 0#
  } else {#
  num.allele.1  <- table.out[1] #
  num.allele.2 <- 2 * table.out[2] + table.out[1]#
  }#
#
af.1 <- num.allele.1 / (num.allele.1 + num.allele.2)#
af.2 <- num.allele.2 / (num.allele.1 + num.allele.2)#
#
first.snp.number.snps[i, 1] <- as.character(snp.names[i]) #
first.snp.number.snps[i, 2] <- names(af.1)#
first.snp.number.snps[i, 3] <- round(as.numeric(af.1), 4) #
first.snp.number.snps[i, 4] <- names(af.2)#
first.snp.number.snps[i, 5] <- round(as.numeric(af.2), 4)#
#
first.snp.number.snps.2[i, 1] <- as.character(snp.names[i]) #
first.snp.number.snps.2[i, 2] <- names(table.out)[1]#
first.snp.number.snps.2[i, 3] <- names(table.out)[2]#
first.snp.number.snps.2[i, 4] <- names(table.out)[3]#
first.snp.number.snps.2[i, 5] <- round(as.numeric(table.out[1]), 4)#
first.snp.number.snps.2[i, 6] <- round(as.numeric(table.out[2]), 4)#
first.snp.number.snps.2[i, 7] <- round(as.numeric(table.out[3]), 4)#
#
colnames(first.snp.number.snps)   <- c("SNP", "A1", "A1_freq", "A2", "A2_freq")#
colnames(first.snp.number.snps.2) <- c("SNP", "A1", "A12", "A2", "A1_Num", "A1_Num", "A1_Num")#
#
allele.freqs <- c(first.snp.number.snps[i, 3], first.snp.number.snps[i, 5])#
maf.true[i] <- allele.freqs[which(allele.freqs < 0.5 )]#
} #
# Pull out these SNPs and check their allele frequencies at diff stages of the data #
# processing#
# ---------------------------------------------------------------------------------#
# Reference from plink#
#
ref.plink.freq.snp.number <- ref.plink.freq[which(ref.plink.freq[ , 2] %in% first.snp.number.snps[, 1]), ]#
ref.plink.freq.snp.number <- ref.plink.freq.snp.number[order(ref.plink.freq.snp.number [, 2], decreasing = T), ]#
# Reference from gcta#
#
ref.gcta.freq.snp.number <- ref.gcta.freq[which(ref.gcta.freq[ , 1] %in% first.snp.number.snps[, 1]), ]#
ref.gcta.freq.snp.number <- ref.gcta.freq.snp.number[order(ref.gcta.freq.snp.number[, 1], decreasing = T), ]#
#
ref.snps.sub <- ref.gcta.freq.snp.number[, 1]#
# Chumby data plink#
#
chdwb.plink.freq.snp.number <- chdwb.plink.freq[which(chdwb.plink.freq[ , 2] %in% ref.snps.sub), ]#
chdwb.plink.freq.snp.number <- chdwb.plink.freq.snp.number[order(chdwb.plink.freq.snp.number[, 2], decreasing = T), ]#
# Chumby data GCTA  #
#
chdwb.update.gcta.freq.snp.number <- chdwb.update.gcta.freq[which(chdwb.update.gcta.freq[ , 1] %in% ref.snps.sub), ]#
chdwb.update.gcta.freq.snp.number <- chdwb.update.gcta.freq.snp.number[order(chdwb.update.gcta.freq.snp.number[, 1], decreasing = T), ]#
# Combine the reference MAF and SNP names for checking#
#
ref.plink.snps    <- as.character(ref.plink.freq.snp.number[ , 2])#
ref.plink.mafs    <- as.numeric(ref.plink.freq.snp.number[ , 5])#
#
ref.gcta.snps     <- as.character(ref.plink.freq.snp.number[ , 2])#
ref.gcta.mafs     <- as.numeric(ref.plink.freq.snp.number[ , 5])#
#
chdwb.plink.snps  <- as.character(chdwb.plink.freq.snp.number[ , 2])#
chdwb.plink.mafs  <- as.numeric(as.character(chdwb.plink.freq.snp.number[ ,5]))#
#
chdwb.gcta.snps   <- as.character(chdwb.update.gcta.freq.snp.number[ , 1])#
chdwb.gcta.mafs   <- as.numeric(chdwb.update.gcta.freq.snp.number[ , 3])#
# Are all the SNP in the reference in the reference ?#
#
length(which(ref.plink.snps %in% ref.gcta.snps)) == length(ref.snps.sub)#
# Are all the SNPs in the reference in both CHDWB subsets ?#
#
length(which(ref.plink.snps %in% chdwb.gcta.snps))  == length(ref.snps.sub)#
length(which(ref.plink.snps %in% chdwb.plink.snps)) == length(ref.snps.sub)#
# Build a matrix of all the allele frequencies for easy access#
#
matrix.test <- as.matrix(cbind(ref.plink.mafs, ref.gcta.mafs, chdwb.plink.mafs, chdwb.gcta.mafs, maf.true))#
#
# Plot the MAF from the original data against the reference#
#
no.to.show <- snp.number#
#
# Plot the reference versus itself just for a test#
#
plot(matrix.test[1:no.to.show, 1],   matrix.test[1:no.to.show, 2], col = "blue", xlim = c(0, 1), ylim = c(0, 1))#
#
# Plot the reference versus plink chumby#
#
points(matrix.test[1:no.to.show, 1],   matrix.test[1:no.to.show, 3], col = "red" )#
#
# Plot the reference versus so called true chumby#
#
points(matrix.test[1:no.to.show, 1],   matrix.test[1:no.to.show, 5], col = "green")
matrix.test
round(matrix.test, 4)
CHDWB1.snp <- CHDWB1.bim[order(CHDWB1.bim[, 2]), 2]#
CHDWB1.bed <- CHDWB1.bed[ ,order(CHDWB1.bim[, 2])]
CHDWB1.bed <- read.plink("~/Desktop/CAGE_impute_prob/CHDWB1_22/CHDWB1_22/CHDWB1_22")#
CHDWB1.bim <- read.table("~/Desktop/CAGE_impute_prob/CHDWB1_22/CHDWB1_22/CHDWB1_22.bim", header = T)#
#
CHDWB1.snp <- CHDWB1.bim[order(CHDWB1.bim[, 2]), 2]#
CHDWB1.bed <- CHDWB1.bed[ ,order(CHDWB1.bim[, 2])]
CHDWB1.bed[1:10, 1:10]
CHDWB1.snp[1:10]
orig.csv.file[1:10, 1:10]
orig.csv.file <- orig.csv.file[ , order(CHDWB1.bim[, 2])]
orig.csv.file[1:10,]
orig.csv.file[1:10, 1:10]
orig.csv.file <- read.csv("~/Desktop/CAGE_impute_prob/CHDWB1_22_Orig/GG1_chr22.csv", header = T)
orig.csv.file[1:10, 1:10]
t(orig.csv.file[1:10, 1:10])
CHDWB1.bed[1:10, 1:10]
CHDWB1.bed <- read.plink("~/Desktop/CAGE_impute_prob/CHDWB1_22/CHDWB1_22/CHDWB1_22")#
CHDWB1.bim <- read.table("~/Desktop/CAGE_impute_prob/CHDWB1_22/CHDWB1_22/CHDWB1_22.bim", header = T)
CHDWB1.bim[1:10, ]
CHDWB1.bim[order(CHDWB1.bim[, 2]), 2][1:10]
dim(CHDWB1.bed)
orig.csv.file <- t(orig.csv.file)
CHDWB1.bed <- read.plink("~/Desktop/CAGE_impute_prob/CHDWB1_22/CHDWB1_22/CHDWB1_22")#
CHDWB1.bim <- read.table("~/Desktop/CAGE_impute_prob/CHDWB1_22/CHDWB1_22/CHDWB1_22.bim", header = F)#
colnames(CHDWB1.bed) <- CHDWB1.bim[, 2]
CHDWB1.bed <- CHDWB1.bed[ ,order(colnames(CHDWB1.bed[))]
CHDWB1.bed <- CHDWB1.bed[ ,order(colnames(CHDWB1.bed))]
CHDWB1.bed[1:10, 1:10]
orig.csv.file[1:10, 1:10]
197535316/10^6
63984612/10^6
paste0("awk '{if ($5 >= ", threshold, ") print $2}' ", info)
paste0("awk '{if ($5 >= ", 0.9, ") print $2}' ", info)
info = "BSGS"
paste0("awk '{if ($5 >= ", 0.9, ") print $2}' ", info)
1+sqrt(3)
2.732/sqrt(2)
1+sqrt(5)
(1+sqrt(5))/2
?optimize
373612328/10e6
9*9
41 -9
32 +9
41+9
c(6441307 , 7104327 , 7034472   , 4632788 , 5568446 , 6614059 , 6922792 , 6592293)/8149345
round(c(6441307 , 7104327 , 7034472   , 4632788 , 5568446 , 6614059 , 6922792 , 6592293)/8149345,3)
round(c(6329042 , 6146049   , 4284181 , 5076174 , 6035836 , 6291757 , 5869975)/6922131,3)
round(c(7762047, 4888500, 5934142, 6512240, 7067419, 6975025)/9167079,3)
round(c(5373933, 6660511, 6362962, 6866080, 7842153)/11408624,3)
round(c(4978601, 4393508, 4525846 ,4968302)/6132851,3)
round(c(5226101, 5419368, 6053483)/7666653,3)
round(c(6636234, 5971829)/7205103,3)
6224095/7968549
orig.csv.file <- read.csv("~/Dropbox/Git_Repos/CAGE_Impute/CHDWB1_22_Orig/GG1_chr22.csv", row.names = 1, header = T)
head(orig.csv.file )
unique(orig.csv.file[-1, -1])
unique(unlist(orig.csv.file[-1, -1]))
bsgs.main <- read.table("~/Desktop/bsgs_main_freq_flip_bim_ref_strand.txt", header = T)
bsgs.pilot <- read.table("~/Desktop/bsgs_pilot_freq_flip_bim_ref_strand.txt", header = T)
head(bsgs.main)
head(bsgs.main, 40)
head(bsgs.pilot, 40)
1999/13
1999/15
1999/17
1999/19
1999/11
2^1999
read.table(pipe("pbpaste"), header = T)
x <- read.table(pipe("pbpaste"), header = T)
round(x, 2)
round(x, 3)
paste?
?pastes
?paste
paste(x, sep = "&")
paste(x, collapse = T, sep = "&")
paste(x, collapse , sep = "&")
paste(x, collapse = "&")
paste(x, collapse = ''&')
paste(x, collapse = '&')
1113359/2992430
atan(3/)
atan(3/4)
pi/8
3*pi/8
0.64/pi
1/5
tan(pi/5)
tan(-/6435)
tan(0.6435)
0.6435011/pi
tan(pi*0.2048)
################################################################################
################################################################################
################################################################################
###                                                                         ####
###     SCRIPT TO IMPLEMENT ALGORITHM FOR SOLVING FOR GROWTH PARAMETERS     ####
###     VIA THE METHOD OUTLINED IN LLOYD-JONES ET AL. USES AN MM ALGORI     ####
###     THM AND THE OPTIM FUNCTION TO OPTIMISE OVER LENGTH FREQUENCY DA     ####
###     TA SETS.                                                            ####
###                                                                         ###	#
################################################################################
################################################################################
################################################################################
#
# Remove any objects to clear the slate#
#
rm(list = ls( ))#
#
# Source the function files needed#
# --------------------------------#
#
setwd("~/Dropbox/Git_Repos/Fisheries_R_Scripts/Blue_Swimmer_Code_New/Vanilla")#
source("bsc_seas_integral_func.R")#
source("bsc_mean_length_func.R")#
source("bsc_seas_root_func.R")#
source("bsc_variance_func.R")#
source("bsc_log_likelihood_func.R")#
source("bsc_pi_calc_func.R")#
source("bsc_mean_var_optim_func.R")#
source("bsc_plot_func.R")#
#
# Data preliminaries#
# ------------------#
#
# Set the working directories#
#
setwd("~/Dropbox/Git_Repos/Fisheries_R_Scripts/Blue_Swimmer_Crab_Code_Sim/")#
setwd("BSC_R_code_best/Diff_Variance_Function/")#
# Read in the data set on the asymptotic males that was gathered through pots#
#
lfd.big.males.females <- read.table("LFD_bigMalesFem", header = T)#
# Pull out the lengths and the dates from these data files#
#
lfd.big.males.females.dates   <- as.Date(lfd.big.males.females$Date, "%d/%m/%y")#
lfd.big.males.females.lengths <- lfd.big.males.females$Carapacewidth#
# Pull out the year and month information from these dates#
#
lfd.big.males.females.dates.year   <- format(lfd.big.males.females.dates, '%Y')#
lfd.big.males.females.dates.months <- format(lfd.big.males.females.dates, '%m')#
# Read in the trawl data on males that contains juvenile recruitment and adults#
#
lfd.trawl.males.females <- read.table("LFD")#
# Pull out the lengths and the dates from these data files#
#
lfd.trawl.males.females.dates   <- as.Date(lfd.trawl.males.females $Date, #
									"%d/%m/%Y")#
lfd.trawl.males.females.lengths <- lfd.trawl.males.females$Carapace.width#
# Concatenate the necessary elements from each file into a common #
# dates and lengths array#
#
lfd.dates   <- c(lfd.trawl.males.females.dates,   lfd.big.males.females.dates)#
lfd.lengths <- c(lfd.trawl.males.females.lengths, lfd.big.males.females.lengths)#
# Subset for males or females#
#
# Males#
#
# combined.sex <- c(lfd.trawl.males.females$Sex,   lfd.big.males.females$Sex)#
# males        <- which(combined.sex == 1)#
# lfd.dates    <- lfd.dates[males]#
# lfd.lengths  <- lfd.lengths[males]#
#
# Females#
#
# combined.sex <- c(lfd.trawl.males.females$Sex,   lfd.big.males.females$Sex)#
# females      <- which(combined.sex == 2)#
# lfd.dates    <- lfd.dates[females]#
# lfd.lengths  <- lfd.lengths[females]#
# Pull out the year and month information from these dates#
#
lfd.year   <- format(lfd.dates, '%Y')#
lfd.months <- format(lfd.dates, '%m')#
# Pull out the years and months that we are interested in #
# i.e., those that don't contain recruitment#
#
str.month.yr.1 <- 2#
end.month.yr.1 <- 8#
#
str.month.yr.2 <- 2#
end.month.yr.2 <- 5#
#
lfd.85.feb.aug <- which((lfd.year == '1985') & #
				  (as.numeric(lfd.months) %in% (str.month.yr.1:end.month.yr.1)))#
lfd.86.feb.may <- which((lfd.year == '1986') &#
				  (as.numeric(lfd.months) %in% (str.month.yr.2:end.month.yr.2)))#
# Initialise the data for the model #
# ---------------------------------#
#
num.months       <- 11													#
lengths          <- lfd.lengths[c(lfd.85.feb.aug, lfd.86.feb.may)]		#
months.85        <- as.numeric(lfd.months[lfd.85.feb.aug]) - 1 # Jan = 0th month#
months.86        <- as.numeric(lfd.months[lfd.86.feb.may]) + 11#
months           <- c(months.85, months.86)#
months.lst       <- as.numeric(names(table(months)))	#
num.months.seq   <- seq(1, num.months)#
# Bootstrap component#
# -------------------#
#
months.seq = as.numeric(levels(factor(months))) #
for (i in months.seq) {                                                                                                                          #
  lengths[which(months == i)] = sample(lengths[which(months == i)],#
                                replace = T)#
                                                                                                                            }#
# Initialise the parameters of the model #
# --------------------------------------#
num.inds <- length(months)                    # Number of individuals we have#
pi.1     <- rep(1/3, num.months)              # Pi mixing prop group 1#
pi.2     <- rep(1/3, num.months)              # Pi mixing prop group 2#
pi.3     <- (1 - (pi.1 + pi.2))               # Pi group 3. Diff from 1#
k0       <- 3                                 # K0 average K#
linf     <- 200                               # Asym length#
mu.yr.1  <- 40                                # First month's average length yr 1#
mu.yr.2  <- 60                                # First month's average length yr 2#
theta.1  <- -0.8                              # Seasonality parameter 1#
theta.2  <- 0.2                               # Seasonality parameter 2#
var.pars <- c(5, 1/100, 3, 1)                 # Variance fun parameter vector#
pars     <- c(k0, theta.1, theta.2, linf,     # Parameters in a vector#
              mu.yr.1, mu.yr.2, var.pars) #
# Initialise the likelihood and set tolerence#
# -------------------------------------------#
#
MeanVarOptim(pars)	#
log.like.full <- -10e5#
tol           <- 10e-6#
log.like.old  <- -Inf	#
# Run while loop over procedure until convergence#
# -----------------------------------------------	#
#
while (log.like.full - log.like.old > tol) {#
#
  # Shift the current likelihood to the old likelihood#
  log.like.old <- log.like.full #
  # Calculate the pi for each group in each month#
  # ---------------------------------------------#
#
  # Returns a vector of pi with each column representing a month#
  # and wach row the groups. Row 1 the largest. Row 2 the yr olds#
  # and row 3 the juveniles#
  pi.all <- sapply(num.months.seq, PiCalc)#
  pi.1   <- pi.all[1, ]#
  pi.2   <- pi.all[2, ]#
  pi.3   <- pi.all[3, ]#
  # Optimise the parameters for the means#
  # -------------------------------------#
  # Initialise and optimise#
  # pars            <- c(k0, theta.1, theta.2, linf, mu.yr.1, mu.yr.2, var.pars) #
  optim.means.var <- optim(pars, MeanVarOptim, control = list(maxit = 100000))	#
  # Ask if optim converged#
  print("Did optim converge?")#
  print(optim.means.var$convergence)#
  # Re-define the global parameters#
  k0        <- optim.means.var$par[1]#
  theta.1   <- optim.means.var$par[2]#
  theta.2   <- optim.means.var$par[3]#
  linf      <- optim.means.var$par[4]#
  mu.yr.1   <- optim.means.var$par[5]#
  mu.yr.2   <- optim.means.var$par[6]#
  var.par.1 <- optim.means.var$par[7]#
  var.par.2 <- optim.means.var$par[8]#
  var.par.3 <- optim.means.var$par[9]#
  var.par.4 <- optim.means.var$par[10]#
  pars      <- optim.means.var$par#
  # If male or female we keep thetas fixed so turn off thetas#
  # above and turn those on below. Look in bsc_mean_var_func.R#
  # for more details#
  #max.contr <- 0.04865565#
  #theta.1   <- pars[2]  #
  #theta.2   <- (theta.1 * (sqrt(1 - cos(2 * pi * max.contr)^2))) /#
  #              cos(2 * pi * max.contr) #
  # Calculate the means again for the final likelihood update#
  mean.2.yr <- sapply(months.lst, MeanLength, k0 = k0, theta.1 = theta.1, #
                     theta.2 = theta.2, linf = linf , mu.yr.1 = mu.yr.1, #
                     mu.yr.2 = mu.yr.2, yrs.old = 2, str.mnth = 1)       #
  mean.1.yr <- sapply(months.lst, MeanLength, k0 = k0, theta.1 = theta.1, #
                     theta.2 = theta.2, linf = linf , mu.yr.1 = mu.yr.1, #
                     mu.yr.2 = mu.yr.2, yrs.old = 1, str.mnth = 1)#
  mean.0.yr <- sapply(months.lst, MeanLength, k0 = k0, theta.1 = theta.1, #
                     theta.2 = theta.2, linf = linf , mu.yr.1 = mu.yr.1, #
                     mu.yr.2 = mu.yr.2, yrs.old = 0, str.mnth = 1)#
  # Calculate the variances again for the final likelihood update#
  var.2.yr  <- sapply(mean.2.yr, BscVar, var.par.1 = var.par.1,#
                     var.par.2 = var.par.2, var.par.3 = var.par.3,#
                     var.par.4 = var.par.4)#
  var.1.yr  <- sapply(mean.1.yr, BscVar, var.par.1 = var.par.1,#
                     var.par.2 = var.par.2, var.par.3 =  var.par.3,#
                     var.par.4 =  var.par.4)#
  var.0.yr  <- sapply(mean.0.yr, BscVar, var.par.1 =  var.par.1,#
                     var.par.2 = var.par.2, var.par.3 = var.par.3,#
                     var.par.4 = var.par.4)#
  # Evaluate the likelihood#
  log.like.full <- sum(sapply(num.months.seq, LogLikelihood))#
  # Give a plot of the current state of the model versus the data#
  # BscPlot(pars)#
  # Print out the loglikelihood, tolerance, and parameters#
  print(c(log.like.full, log.like.full - log.like.old))#
  print(pars)#
}
?sample
sample(c(1, 10e6), 1)
sample(c(1, 10e6), 1)
sample(c(1, 10e6), 1)
sample(c(1, 10e6), 1)
sample(seq(1, 10e6), 1)
sample(seq(1, 10e6), 1)
sample(seq(1, 10e6), 1)
sample(seq(1, 10e6), 1)
sample(seq(1, 10e6), 1)
sample(seq(1, 10e6), 1)
sample(seq(1, 10e6), 1)
sample(seq(1, 10e6), 1)
sample(seq(1, 10e6), 1)
sample(seq(1, 10e6), 1)
sample(seq(1, 10e6), 1)
paste0("Combined/pars_", sample(seq(1, 10e6), 1))
################################################################################
################################################################################
################################################################################
###                                                                         ####
###     SCRIPT TO IMPLEMENT ALGORITHM FOR SOLVING FOR GROWTH PARAMETERS     ####
###     VIA THE METHOD OUTLINED IN LLOYD-JONES ET AL. USES AN MM ALGORI     ####
###     THM AND THE OPTIM FUNCTION TO OPTIMISE OVER LENGTH FREQUENCY DA     ####
###     TA SETS.                                                            ####
###                                                                         ###	#
################################################################################
################################################################################
################################################################################
#
# Remove any objects to clear the slate#
#
rm(list = ls( ))#
#
# Source the function files needed#
# --------------------------------#
#
setwd("/ibscratch/wrayvisscher/Luke/Blue_Swimmer_Crab/Crab_Bootstrap")#
source("bsc_seas_integral_func.R")#
source("bsc_mean_length_func.R")#
source("bsc_seas_root_func.R")#
source("bsc_variance_func.R")#
source("bsc_log_likelihood_func.R")#
source("bsc_pi_calc_func.R")#
source("bsc_mean_var_optim_func.R")#
source("bsc_plot_func.R")#
#
# Data preliminaries#
# ------------------#
#
# Set the working directories#
#
setwd("~/Dropbox/Git_Repos/Fisheries_R_Scripts/Blue_Swimmer_Crab_Code_Sim/")#
setwd("BSC_R_code_best/Diff_Variance_Function/")#
# Read in the data set on the asymptotic males that was gathered through pots#
#
lfd.big.males.females <- read.table("LFD_bigMalesFem", header = T)#
# Pull out the lengths and the dates from these data files#
#
lfd.big.males.females.dates   <- as.Date(lfd.big.males.females$Date, "%d/%m/%y")#
lfd.big.males.females.lengths <- lfd.big.males.females$Carapacewidth#
# Pull out the year and month information from these dates#
#
lfd.big.males.females.dates.year   <- format(lfd.big.males.females.dates, '%Y')#
lfd.big.males.females.dates.months <- format(lfd.big.males.females.dates, '%m')#
# Read in the trawl data on males that contains juvenile recruitment and adults#
#
lfd.trawl.males.females <- read.table("LFD")#
# Pull out the lengths and the dates from these data files#
#
lfd.trawl.males.females.dates   <- as.Date(lfd.trawl.males.females $Date, #
									"%d/%m/%Y")#
lfd.trawl.males.females.lengths <- lfd.trawl.males.females$Carapace.width#
# Concatenate the necessary elements from each file into a common #
# dates and lengths array#
#
lfd.dates   <- c(lfd.trawl.males.females.dates,   lfd.big.males.females.dates)#
lfd.lengths <- c(lfd.trawl.males.females.lengths, lfd.big.males.females.lengths)#
# Subset for males or females#
#
# Males#
#
combined.sex <- c(lfd.trawl.males.females$Sex,   lfd.big.males.females$Sex)#
males        <- which(combined.sex == 1)#
lfd.dates    <- lfd.dates[males]#
lfd.lengths  <- lfd.lengths[males]#
#
# Females#
#
# combined.sex <- c(lfd.trawl.males.females$Sex,   lfd.big.males.females$Sex)#
# females      <- which(combined.sex == 2)#
# lfd.dates    <- lfd.dates[females]#
# lfd.lengths  <- lfd.lengths[females]#
# Pull out the year and month information from these dates#
#
lfd.year   <- format(lfd.dates, '%Y')#
lfd.months <- format(lfd.dates, '%m')#
# Pull out the years and months that we are interested in #
# i.e., those that don't contain recruitment#
#
str.month.yr.1 <- 2#
end.month.yr.1 <- 8#
#
str.month.yr.2 <- 2#
end.month.yr.2 <- 5#
#
lfd.85.feb.aug <- which((lfd.year == '1985') & #
				  (as.numeric(lfd.months) %in% (str.month.yr.1:end.month.yr.1)))#
lfd.86.feb.may <- which((lfd.year == '1986') &#
				  (as.numeric(lfd.months) %in% (str.month.yr.2:end.month.yr.2)))#
# Initialise the data for the model #
# ---------------------------------#
#
num.months       <- 11													#
lengths          <- lfd.lengths[c(lfd.85.feb.aug, lfd.86.feb.may)]		#
months.85        <- as.numeric(lfd.months[lfd.85.feb.aug]) - 1 # Jan = 0th month#
months.86        <- as.numeric(lfd.months[lfd.86.feb.may]) + 11#
months           <- c(months.85, months.86)#
months.lst       <- as.numeric(names(table(months)))	#
num.months.seq   <- seq(1, num.months)#
# Bootstrap component#
# -------------------#
#
months.seq = as.numeric(levels(factor(months))) #
for (i in months.seq) {                                                                                                                          #
  lengths[which(months == i)] = sample(lengths[which(months == i)],#
                                replace = T)#
                                                                                                                            }#
# Initialise the parameters of the model #
# --------------------------------------#
num.inds <- length(months)                    # Number of individuals we have#
pi.1     <- rep(1/3, num.months)              # Pi mixing prop group 1#
pi.2     <- rep(1/3, num.months)              # Pi mixing prop group 2#
pi.3     <- (1 - (pi.1 + pi.2))               # Pi group 3. Diff from 1#
k0       <- 3                                 # K0 average K#
linf     <- 200                               # Asym length#
mu.yr.1  <- 40                                # First month's average length yr 1#
mu.yr.2  <- 60                                # First month's average length yr 2#
theta.1  <- -0.8                              # Seasonality parameter 1#
theta.2  <- 0.2                               # Seasonality parameter 2#
var.pars <- c(5, 1/100, 3, 1)                 # Variance fun parameter vector#
pars     <- c(k0, theta.1, theta.2, linf,     # Parameters in a vector#
              mu.yr.1, mu.yr.2, var.pars) #
# Initialise the likelihood and set tolerence#
# -------------------------------------------#
#
MeanVarOptim(pars)	#
log.like.full <- -10e5#
tol           <- 10e-6#
log.like.old  <- -Inf	#
# Run while loop over procedure until convergence#
# -----------------------------------------------	#
#
while (log.like.full - log.like.old > tol) {#
#
  # Shift the current likelihood to the old likelihood#
  log.like.old <- log.like.full #
  # Calculate the pi for each group in each month#
  # ---------------------------------------------#
#
  # Returns a vector of pi with each column representing a month#
  # and wach row the groups. Row 1 the largest. Row 2 the yr olds#
  # and row 3 the juveniles#
  pi.all <- sapply(num.months.seq, PiCalc)#
  pi.1   <- pi.all[1, ]#
  pi.2   <- pi.all[2, ]#
  pi.3   <- pi.all[3, ]#
  # Optimise the parameters for the means#
  # -------------------------------------#
  # Initialise and optimise#
  # pars            <- c(k0, theta.1, theta.2, linf, mu.yr.1, mu.yr.2, var.pars) #
  optim.means.var <- optim(pars, MeanVarOptim, control = list(maxit = 100000))	#
  # Ask if optim converged#
  print("Did optim converge?")#
  print(optim.means.var$convergence)#
  # Re-define the global parameters#
  k0        <- optim.means.var$par[1]#
  theta.1   <- optim.means.var$par[2]#
  theta.2   <- optim.means.var$par[3]#
  linf      <- optim.means.var$par[4]#
  mu.yr.1   <- optim.means.var$par[5]#
  mu.yr.2   <- optim.means.var$par[6]#
  var.par.1 <- optim.means.var$par[7]#
  var.par.2 <- optim.means.var$par[8]#
  var.par.3 <- optim.means.var$par[9]#
  var.par.4 <- optim.means.var$par[10]#
  pars      <- optim.means.var$par#
  # If male or female we keep thetas fixed so turn off thetas#
  # above and turn those on below. Look in bsc_mean_var_func.R#
  # for more details#
  #max.contr <- 0.04865565#
  #theta.1   <- pars[2]  #
  #theta.2   <- (theta.1 * (sqrt(1 - cos(2 * pi * max.contr)^2))) /#
  #              cos(2 * pi * max.contr) #
  # Calculate the means again for the final likelihood update#
  mean.2.yr <- sapply(months.lst, MeanLength, k0 = k0, theta.1 = theta.1, #
                     theta.2 = theta.2, linf = linf , mu.yr.1 = mu.yr.1, #
                     mu.yr.2 = mu.yr.2, yrs.old = 2, str.mnth = 1)       #
  mean.1.yr <- sapply(months.lst, MeanLength, k0 = k0, theta.1 = theta.1, #
                     theta.2 = theta.2, linf = linf , mu.yr.1 = mu.yr.1, #
                     mu.yr.2 = mu.yr.2, yrs.old = 1, str.mnth = 1)#
  mean.0.yr <- sapply(months.lst, MeanLength, k0 = k0, theta.1 = theta.1, #
                     theta.2 = theta.2, linf = linf , mu.yr.1 = mu.yr.1, #
                     mu.yr.2 = mu.yr.2, yrs.old = 0, str.mnth = 1)#
  # Calculate the variances again for the final likelihood update#
  var.2.yr  <- sapply(mean.2.yr, BscVar, var.par.1 = var.par.1,#
                     var.par.2 = var.par.2, var.par.3 = var.par.3,#
                     var.par.4 = var.par.4)#
  var.1.yr  <- sapply(mean.1.yr, BscVar, var.par.1 = var.par.1,#
                     var.par.2 = var.par.2, var.par.3 =  var.par.3,#
                     var.par.4 =  var.par.4)#
  var.0.yr  <- sapply(mean.0.yr, BscVar, var.par.1 =  var.par.1,#
                     var.par.2 = var.par.2, var.par.3 = var.par.3,#
                     var.par.4 = var.par.4)#
  # Evaluate the likelihood#
  log.like.full <- sum(sapply(num.months.seq, LogLikelihood))#
  # Give a plot of the current state of the model versus the data#
  # BscPlot(pars)#
  # Print out the loglikelihood, tolerance, and parameters#
  print(c(log.like.full, log.like.full - log.like.old))#
  print(pars)#
}#
out <- paste0("Males/pars_", sample(seq(1, 10e6), 1))#
write.table(pars, out, quote = F)
