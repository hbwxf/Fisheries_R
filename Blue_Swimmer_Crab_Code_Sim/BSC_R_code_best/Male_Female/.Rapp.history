det(MNJ2)
STRVAL=function(a,b,c,Linf, mu01,k,theta1,theta2,tau1,tau2, tau3, Tlib1, Tlib2, Tlib3, SIN1, COS1, SIN2, COS2, SIN3, COS3, l)#
{#
	J=HESS(a,b,c, Linf, mu01, k, theta1, theta2, tau1, tau2,tau3, Tlib1, Tlib2, Tlib3, SIN1, COS1, SIN2, COS2, SIN3, COS3,l)#
	det(J)#
}
?optim
a=10; b=1; c=-0.05; Linf=150; mu01=60; mu02=70; k=1; theta1=-1; theta2=1; tau1=0.333; tau2=0.333; tau3=0.333; Tlib1=0.5; Tlib2=1.5; Tlib3=2.5; SIN1=0.05; COS1=0.05; SIN2=0.05; COS2=0.05; SIN3=0.05; COS3=0.05; l=80;#
theta=c(a,b,c, Linf, mu01, k, theta1, theta2, tau1, tau2,tau3, Tlib1, Tlib2, Tlib3, SIN1, COS1, SIN2, COS2, SIN3, COS3,l)
optim(theta,STRVAL)
STRVAL=function(theta)#
{#
	a=theta[1]; b=theta[2]; c=theta[3]; Linf=theta[4]; mu01=theta[5]; mu02=theta[6]; k=theta[7]; theta1=theta[8]; theta2=theta[9]; tau1=theta[10];tau2=theta[11]; tau3=theta[12]; Tlib1=theta[13]; Tlib2=theta[14]; Tlib3=theta[15]; SIN1=theta[16]; COS1=theta[17]; SIN2=theta[18]; COS2=theta[19]; SIN3=theta[20]; COS3=theta[21]; l=theta[22];#
	J=HESS(a,b,c, Linf, mu01, k, theta1, theta2, tau1, tau2,tau3, Tlib1, Tlib2, Tlib3, SIN1, COS1, SIN2, COS2, SIN3, COS3,l)#
	det(J)#
}#
optim(theta,STRVAL)
theta
a=theta[1]; b=theta[2]; c=theta[3]; Linf=theta[4]; mu01=theta[5]; k=theta[6]; theta1=theta[7]; theta2=theta[8]; tau1=theta[9];tau2=theta[10]; tau3=theta[11]; Tlib1=theta[12]; Tlib2=theta[13]; Tlib3=theta[14]; SIN1=theta[15]; COS1=theta[16]; SIN2=theta[17]; COS2=theta[18]; SIN3=theta[19]; COS3=theta[20]; l=theta[21];#
	J=HESS(a,b,c, Linf, mu01, k, theta1, theta2, tau1, tau2,tau3, Tlib1, Tlib2, Tlib3, SIN1, COS1, SIN2, COS2, SIN3, COS3,l)#
	det(J)
STRVAL=function(theta)#
{#
	a=theta[1]; b=theta[2]; c=theta[3]; Linf=theta[4]; mu01=theta[5]; k=theta[6]; theta1=theta[7]; theta2=theta[8]; tau1=theta[9];tau2=theta[10]; tau3=theta[11]; Tlib1=theta[12]; Tlib2=theta[13]; Tlib3=theta[14]; SIN1=theta[15]; COS1=theta[16]; SIN2=theta[17]; COS2=theta[18]; SIN3=theta[19]; COS3=theta[20]; l=theta[21];#
	J=HESS(a,b,c, Linf, mu01, k, theta1, theta2, tau1, tau2,tau3, Tlib1, Tlib2, Tlib3, SIN1, COS1, SIN2, COS2, SIN3, COS3,l)#
	det(J)#
}#
optim(theta,STRVAL)
STRVAL=function(theta)#
{#
	a=theta[1]; b=theta[2]; c=theta[3]; Linf=theta[4]; mu01=theta[5]; k=theta[6]; theta1=theta[7]; theta2=theta[8]; tau1=theta[9];tau2=theta[10]; tau3=theta[11]; Tlib1=theta[12]; Tlib2=theta[13]; Tlib3=theta[14]; SIN1=theta[15]; COS1=theta[16]; SIN2=theta[17]; COS2=theta[18]; SIN3=theta[19]; COS3=theta[20]; l=theta[21];#
	J=HESS(a,b,c, Linf, mu01, k, theta1, theta2, tau1, tau2,tau3, Tlib1, Tlib2, Tlib3, SIN1, COS1, SIN2, COS2, SIN3, COS3,l)#
	print(det(J))#
	det(J)#
}#
optim(theta,STRVAL)
a=10; b=1; c=-0.05; Linf=150; mu01=60; mu02=70; k=1; theta1=-1; theta2=1; tau1=0.333; tau2=0.333; tau3=0.333; Tlib1=0.5; Tlib2=1.5; Tlib3=2.5; SIN1=0.05; COS1=0.05; SIN2=0.05; COS2=0.05; SIN3=0.05; COS3=0.05; l=80;#
theta=c(a,b,c, Linf, mu01, k, theta1, theta2, tau1, tau2,tau3, Tlib1, Tlib2, Tlib3, SIN1, COS1, SIN2, COS2, SIN3, COS3,l)#
#
STRVAL=function(theta)#
{#
	a=theta[1]; b=theta[2]; c=theta[3]; Linf=theta[4]; mu01=theta[5]; k=theta[6]; theta1=theta[7]; theta2=theta[8]; tau1=theta[9];tau2=theta[10]; tau3=theta[11]; Tlib1=theta[12]; Tlib2=theta[13]; Tlib3=theta[14]; SIN1=theta[15]; COS1=theta[16]; SIN2=theta[17]; COS2=theta[18]; SIN3=theta[19]; COS3=theta[20]; l=theta[21];#
	J=HESS(a,b,c, Linf, mu01, k, theta1, theta2, tau1, tau2,tau3, Tlib1, Tlib2, Tlib3, SIN1, COS1, SIN2, COS2, SIN3, COS3,l)#
	print(det(J))#
	det(J)#
}#
optim(theta,STRVAL,control=list(maxit=1000))
STRVAL=function(theta)#
{#
	a=theta[1]; b=theta[2]; c=theta[3]; Linf=theta[4]; mu01=theta[5]; k=theta[6]; theta1=theta[7]; theta2=theta[8]; tau1=theta[9];tau2=theta[10]; tau3=theta[11]; Tlib1=theta[12]; Tlib2=theta[13]; Tlib3=theta[14]; SIN1=theta[15]; COS1=theta[16]; SIN2=theta[17]; COS2=theta[18]; SIN3=theta[19]; COS3=theta[20]; l=theta[21];#
	J=HESS(a,b,c, Linf, mu01, k, theta1, theta2, tau1, tau2,tau3, Tlib1, Tlib2, Tlib3, SIN1, COS1, SIN2, COS2, SIN3, COS3,l)#
	print(theta)#
	print(det(J))#
	det(J)#
}#
optim(theta,STRVAL,control=list(maxit=1000))
theta=c(10.13424359,  1.42879083,  -0.01515581, 150.30959820,  59.65823292,   1.34175619  ,-0.55150142,   1.24539542, 0.26473121 ,  0.62044137 ,  0.63596122 ,  0.52967109 ,  1.37157817,   2.49614933 , -0.06740899 , -0.12224056, 13.55505483 ,  0.26066829  ,-0.17698405 , -0.24614825 , 80.09952504)
a=theta[1]; b=theta[2]; c=theta[3]; Linf=theta[4]; mu01=theta[5]; k=theta[6]; theta1=theta[7]; theta2=theta[8]; tau1=theta[9];tau2=theta[10]; tau3=theta[11]; Tlib1=theta[12]; Tlib2=theta[13]; Tlib3=theta[14]; SIN1=theta[15]; COS1=theta[16]; SIN2=theta[17]; COS2=theta[18]; SIN3=theta[19]; COS3=theta[20]; l=theta[21];
J=HESS(a,b,c, Linf, mu01, k, theta1, theta2, tau1, tau2,tau3, Tlib1, Tlib2, Tlib3, SIN1, COS1, SIN2, COS2, SIN3, COS3,l)
det(J)
solve(J)
J=HESS(a,b,c, Linf, mu01, k, theta1, theta2, tau1, tau2,tau3, Tlib1, Tlib2, Tlib3, SIN1, COS1, SIN2, COS2, SIN3, COS3,l)#
S=SCORE(a,b,c, Linf, mu01, k, theta1, theta2, tau1, tau2,tau3, Tlib1, Tlib2, Tlib3, SIN1, COS1, SIN2, COS2, SIN3, COS3,l)
J%*%S
JIN=solve(J)
JIN%*%S
JIN=solve(J)
JIN%*%S
theta
thetanew=theta-JIN%*%S
theta
S
thetaold=theta[1:8]
thetanew=thetaold-JIN%*%S
thetanew
JIN%*%S
theta[1:8]=thetanew
J=HESS(a,b,c, Linf, mu01, k, theta1, theta2, tau1, tau2,tau3, Tlib1, Tlib2, Tlib3, SIN1, COS1, SIN2, COS2, SIN3, COS3,l)#
S=SCORE(a,b,c, Linf, mu01, k, theta1, theta2, tau1, tau2,tau3, Tlib1, Tlib2, Tlib3, SIN1, COS1, SIN2, COS2, SIN3, COS3,l)
JIN=solve(J)
thetaold=theta[1:8]
thetanew=thetaold-JIN%*%S
thetanew
theta[1:8]=thetanew
theta=c(10.13424359,  1.42879083,  -0.01515581, 150.30959820,  59.65823292,   1.34175619  ,-0.55150142,   1.24539542, 0.26473121 ,  0.62044137 ,  0.63596122 ,  0.52967109 ,  1.37157817,   2.49614933 , -0.06740899 , -0.12224056, 13.55505483 ,  0.26066829  ,-0.17698405 , -0.24614825 , 80.09952504)#
a=theta[1]; b=theta[2]; c=theta[3]; Linf=theta[4]; mu01=theta[5]; k=theta[6]; theta1=theta[7]; theta2=theta[8]; tau1=theta[9];tau2=theta[10]; tau3=theta[11]; Tlib1=theta[12]; Tlib2=theta[13]; Tlib3=theta[14]; SIN1=theta[15]; COS1=theta[16]; SIN2=theta[17]; COS2=theta[18]; SIN3=theta[19]; COS3=theta[20]; l=theta[21];
J=HESS(a,b,c, Linf, mu01, k, theta1, theta2, tau1, tau2,tau3, Tlib1, Tlib2, Tlib3, SIN1, COS1, SIN2, COS2, SIN3, COS3,l)#
S=SCORE(a,b,c, Linf, mu01, k, theta1, theta2, tau1, tau2,tau3, Tlib1, Tlib2, Tlib3, SIN1, COS1, SIN2, COS2, SIN3, COS3,l)#
JIN=solve(J)#
thetaold=theta[1:8]#
thetanew=thetaold-JIN%*%S#
#
theta[1:8]=thetanew
theta
thetaold
a=theta[1]; b=theta[2]; c=theta[3]; Linf=theta[4]; mu01=theta[5]; k=theta[6]; theta1=theta[7]; theta2=theta[8]; tau1=theta[9];tau2=theta[10]; tau3=theta[11]; Tlib1=theta[12]; Tlib2=theta[13]; Tlib3=theta[14]; SIN1=theta[15]; COS1=theta[16]; SIN2=theta[17]; COS2=theta[18]; SIN3=theta[19]; COS3=theta[20]; l=theta[21];#
J=HESS(a,b,c, Linf, mu01, k, theta1, theta2, tau1, tau2,tau3, Tlib1, Tlib2, Tlib3, SIN1, COS1, SIN2, COS2, SIN3, COS3,l)#
S=SCORE(a,b,c, Linf, mu01, k, theta1, theta2, tau1, tau2,tau3, Tlib1, Tlib2, Tlib3, SIN1, COS1, SIN2, COS2, SIN3, COS3,l)#
JIN=solve(J)#
thetaold=theta[1:8]#
thetanew=thetaold-JIN%*%S#
#
theta[1:8]=thetanew#
theta[1:8]
theta=c(10.13424359,  1.42879083,  -0.01515581, 150.30959820,  59.65823292,   1.34175619  ,-0.55150142,   1.24539542, 0.26473121 ,  0.62044137 ,  0.63596122 ,  0.52967109 ,  1.37157817,   2.49614933 , -0.06740899 , -0.12224056, 13.55505483 ,  0.26066829  ,-0.17698405 , -0.24614825 , 80.09952504)#
a=theta[1]; b=theta[2]; c=theta[3]; Linf=theta[4]; mu01=theta[5]; k=theta[6]; theta1=theta[7]; theta2=theta[8]; tau1=theta[9];tau2=theta[10]; tau3=theta[11]; Tlib1=theta[12]; Tlib2=theta[13]; Tlib3=theta[14]; SIN1=theta[15]; COS1=theta[16]; SIN2=theta[17]; COS2=theta[18]; SIN3=theta[19]; COS3=theta[20]; l=theta[21];#
J=HESS(a,b,c, Linf, mu01, k, theta1, theta2, tau1, tau2,tau3, Tlib1, Tlib2, Tlib3, SIN1, COS1, SIN2, COS2, SIN3, COS3,l)#
S=SCORE(a,b,c, Linf, mu01, k, theta1, theta2, tau1, tau2,tau3, Tlib1, Tlib2, Tlib3, SIN1, COS1, SIN2, COS2, SIN3, COS3,l)
JIN=solve(J)
thetaold=theta[1:8]
thetaold
JIN
S
JIN%*%S
JIN=solve(J)#
thetaold=theta[1:8]#
thetanew=thetaold-JIN%*%S#
#
theta[1:8]=thetanew#
theta[1:8]
theta
a=theta[1]; b=theta[2]; c=theta[3]; Linf=theta[4]; mu01=theta[5]; k=theta[6]; theta1=theta[7]; theta2=theta[8]; tau1=theta[9];tau2=theta[10]; tau3=theta[11]; Tlib1=theta[12]; Tlib2=theta[13]; Tlib3=theta[14]; SIN1=theta[15]; COS1=theta[16]; SIN2=theta[17]; COS2=theta[18]; SIN3=theta[19]; COS3=theta[20]; l=theta[21];
J=HESS(a,b,c, Linf, mu01, k, theta1, theta2, tau1, tau2,tau3, Tlib1, Tlib2, Tlib3, SIN1, COS1, SIN2, COS2, SIN3, COS3,l)#
S=SCORE(a,b,c, Linf, mu01, k, theta1, theta2, tau1, tau2,tau3, Tlib1, Tlib2, Tlib3, SIN1, COS1, SIN2, COS2, SIN3, COS3,l)
JIN=solve(J)#
thetaold=theta[1:8]#
thetanew=thetaold-JIN%*%S
thetanew
JIN=solve(J)#
thetaold=theta[1:8]#
thetanew=thetaold-JIN%*%S#
#
theta[1:8]=thetanew#
theta[1:8]
a=theta[1]; b=theta[2]; c=theta[3]; Linf=theta[4]; mu01=theta[5]; k=theta[6]; theta1=theta[7]; theta2=theta[8]; tau1=theta[9];tau2=theta[10]; tau3=theta[11]; Tlib1=theta[12]; Tlib2=theta[13]; Tlib3=theta[14]; SIN1=theta[15]; COS1=theta[16]; SIN2=theta[17]; COS2=theta[18]; SIN3=theta[19]; COS3=theta[20]; l=theta[21];#
J=HESS(a,b,c, Linf, mu01, k, theta1, theta2, tau1, tau2,tau3, Tlib1, Tlib2, Tlib3, SIN1, COS1, SIN2, COS2, SIN3, COS3,l)#
S=SCORE(a,b,c, Linf, mu01, k, theta1, theta2, tau1, tau2,tau3, Tlib1, Tlib2, Tlib3, SIN1, COS1, SIN2, COS2, SIN3, COS3,l)#
JIN=solve(J)#
thetaold=theta[1:8]#
thetanew=thetaold-JIN%*%S#
#
theta[1:8]=thetanew#
theta[1:8]
a=10; b=1; c=-0.05; Linf=150; mu01=60; k=1; theta1=-1; theta2=1; tau1=0.333; tau2=0.333; tau3=0.333; Tlib1=0.5; Tlib2=1.5; Tlib3=2.5; SIN1=0.05; COS1=0.05; SIN2=0.05; COS2=0.05; SIN3=0.05; COS3=0.05; l=80;#
theta=c(a,b,c, Linf, mu01, k, theta1, theta2, tau1, tau2,tau3, Tlib1, Tlib2, Tlib3, SIN1, COS1, SIN2, COS2, SIN3, COS3,l)#
#
STRVAL=function(theta)#
{#
	a=theta[1]; b=theta[2]; c=theta[3]; Linf=theta[4]; mu01=theta[5]; k=theta[6]; theta1=theta[7]; theta2=theta[8]; tau1=theta[9];tau2=theta[10]; tau3=theta[11]; Tlib1=theta[12]; Tlib2=theta[13]; Tlib3=theta[14]; SIN1=theta[15]; COS1=theta[16]; SIN2=theta[17]; COS2=theta[18]; SIN3=theta[19]; COS3=theta[20]; l=theta[21];#
	J=HESS(a,b,c, Linf, mu01, k, theta1, theta2, tau1, tau2,tau3, Tlib1, Tlib2, Tlib3, SIN1, COS1, SIN2, COS2, SIN3, COS3,l)#
	print(theta)#
	print(det(J))#
	det(J)#
}#
optim(theta,STRVAL,control=list(maxit=1000))
res=optim(theta,STRVAL,control=list(maxit=1000))
res$par
theta=res$par
=theta[1]; b=theta[2]; c=theta[3]; Linf=theta[4]; mu01=theta[5]; k=theta[6]; theta1=theta[7]; theta2=theta[8]; tau1=theta[9];tau2=theta[10]; tau3=theta[11]; Tlib1=theta[12]; Tlib2=theta[13]; Tlib3=theta[14]; SIN1=theta[15]; COS1=theta[16]; SIN2=theta[17]; COS2=theta[18]; SIN3=theta[19]; COS3=theta[20]; l=theta[21];#
J=HESS(a,b,c, Linf, mu01, k, theta1, theta2, tau1, tau2,tau3, Tlib1, Tlib2, Tlib3, SIN1, COS1, SIN2, COS2, SIN3, COS3,l)#
S=SCORE(a,b,c, Linf, mu01, k, theta1, theta2, tau1, tau2,tau3, Tlib1, Tlib2, Tlib3, SIN1, COS1, SIN2, COS2, SIN3, COS3,l)
a=theta[1]; b=theta[2]; c=theta[3]; Linf=theta[4]; mu01=theta[5]; k=theta[6]; theta1=theta[7]; theta2=theta[8]; tau1=theta[9];tau2=theta[10]; tau3=theta[11]; Tlib1=theta[12]; Tlib2=theta[13]; Tlib3=theta[14]; SIN1=theta[15]; COS1=theta[16]; SIN2=theta[17]; COS2=theta[18]; SIN3=theta[19]; COS3=theta[20]; l=theta[21];#
J=HESS(a,b,c, Linf, mu01, k, theta1, theta2, tau1, tau2,tau3, Tlib1, Tlib2, Tlib3, SIN1, COS1, SIN2, COS2, SIN3, COS3,l)#
S=SCORE(a,b,c, Linf, mu01, k, theta1, theta2, tau1, tau2,tau3, Tlib1, Tlib2, Tlib3, SIN1, COS1, SIN2, COS2, SIN3, COS3,l)
JIN=solve(J)
theta
det(J)
c( 1.373796e+00,  2.407969e-01,  9.703210e-01,  1.465966e+02,  5.934738e+01, 8.475229e+01, -2.093749e+04,  1.125339e+01, -6.980212e-02)
x=c( 1.373796e+00,  2.407969e-01,  9.703210e-01,  1.465966e+02,  5.934738e+01, 8.475229e+01, -2.093749e+04,  1.125339e+01, -6.980212e-02)
round(x,3)
c(3,9.7,4.5,7.2,9.23)
xc(3,9.7,4.5,7.2,9.23)
x=c(3,9.7,4.5,7.2,9.23)
mean(x)
std(x)
sd(x)
x-mean(x)
v=c(1,2.5, 90.0, 3.2, 9.7)
sum(v^2)
sqrt(sum(v^2))
matrix(c(1,9,3,4,5,2,7,6),ncol=3,nrow=4)
xmatrix(c(1,9,3,4,5,2,7,6),ncol=3,nrow=3)
x=matrix(c(1,9,3,4,5,2,7,6),ncol=3,nrow=3)
x=matrix(c(1,9,3,4,4,5,2,7,6),ncol=3,nrow=3)
det(x)
x
x=matrix(c(1,9,3,4,4,5,2,7,6),nrow=3,ncol=3)
det(x)
x
det(t(x))
t(x)
y=t(x)
det(y)
?density
1.2/8.6
A=matrix(c(1,4,6,9,5,1,3,2,9),nrow=3,ncol=3)
A
b=vector(c(1,9,3))
?vector
b=as.vector(c(1,9,3))
b
dim(b)
b=matrix(c(1,9,3),nrow=3,ncol=1)
b
solve(A)%*%b
6*9
6*3
53/9
-3-(-53/-31)*(-10)
9-18
-9-(-53/-31)*(-10)
-10-(-53/-31)*(-10)
-8-(-53/-31)*(-10)
-9-(-53/-31)*(-10)
6*3
1-6*9
9-6*3
1-6*9
A
lu(A)
library("Matrix")
lu(A)
x=lu(A)
x$x
LU=lu(A)
LU$x
LU(x)
LU@x
-3-(-53/-31)*(5)
vs=c(500,1000,5000,10000,15000,30000,45000,60000,75000,90000,100000)
vs
vs*0.01
vs*0.001
vs*0.0001
vs[1,2,3]=0.5
vs[1]=0.5
vs[2]=0.5
vs[3]=0.5
vs
mem=vs*0.0001
mem
vs=c(500,1000,5000,10000,15000,30000,45000,60000,75000,90000,100000)
mem=vs*0.0001
X = randn(4,4);
randn(4,4)
X = rand(4,4);
X = rnorm(4,4);
X
X = rnorm(16);
X=as.matrix(X,ncol=4,nrow=4)
X
X=matrix(X,ncol=4,nrow=4)
X
X = rnorm(10000);
X=matrix(X,ncol=100,nrow=100)
sd(X[,1])
sd(X[,2])
prod=X'X
prod=t(X)%*%X
prod[1:10,1:10]
prod2=prod/diag(sqrt(diag(prod)))
prod2
prod[,1]
sd(X[,1])
diag(X)
sqrt(diag(prod))
X = rnorm(10000);#
X=matrix(X,ncol=100,nrow=100)#
prod=t(X)%*%X#
norm=sqrt(diag(prod))#
for (i in seq(1,dim(X)[2]))#
{#
X[,i]=X[,i]/norm[i]#
}#
#
Prod2=t(X)%*%X
diag(Prod2)
eye(100)*diag(Prod2)
ones(100)*diag(Prod2)
one(100)*diag(Prod2)
diag(Prod2)
Prod2
diag(Prod2)=0
Prod2
abs(Prod2)
max(abs(Prod2))
X = rnorm(10000);#
X=matrix(X,ncol=1000,nrow=10)#
prod=t(X)%*%X#
norm=sqrt(diag(prod))#
for (i in seq(1,dim(X)[2]))#
{#
X[,i]=X[,i]/norm[i]#
}#
#
Prod2=t(X)%*%X#
diag(Prod2)=0#
max(abs(Prod2))
sqrt((dim(X)[2]-dim(X)[1]/(dim(X)[1]*(dim(X)[2]-1)))
sqrt((dim(X)[2]-dim(X)[1]/(dim(X)[1]*(dim(X)[2]-1))))
sqrt((dim(X)[2]-dim(X)[1])/(dim(X)[1]*(dim(X)[2]-1)))
1200/0.03
A=matrix(c(rnorm(100)),nrow=10,ncol=10)
t(A)
A
t(A)%*%A
det(t(A)%*%A)
A=matrix(c(rnorm(1000)),nrow=10,ncol=100)
det(t(A)%*%A)
t(A)%*%A
det(t(A)%*%A)
dim(t(A)%*%A)
det(t(A)%*%A+0.5*eye(ncol))
det(t(A)%*%A+0.5*diag(ncol))
diag(ncol)
det(t(A)%*%A+0.5*diag(100))
solve(det(t(A)%*%A+0.5*diag(100)))
diag(100)
0.5*diag(100)
solve(t(A)%*%A+0.5*diag(100)))
solve(t(A)%*%A+0.5*diag(100))
solve(det(t(A)%*%A+0.5*diag(100)))
solve(t(A)%*%A+0.5*diag(100))
A=matrix(c(1,2,3,-9,-2,2,9,0,1),nrow=3,ncol=3)
A
P=matrix(c(0,0,1,0,1,0,1,0,0),nrow=3,ncol=3)
P
P%*%A
P=matrix(c(1,0,1,0,1,0,1,0,0),nrow=3,ncol=3)
P
P=matrix(c(1,0,0,0,1,0,1,0,0),nrow=3,ncol=3)
A=matrix(c(1,2,3,-9,-2,2,9,0,1),nrow=3,ncol=3)
P%*%A
A=matrix(c(1,2,3,-9,-2,2,9,0,1),nrow=3,ncol=3)#
P=matrix(c(1,0,0,0,1,0,1,0,0),nrow=3,ncol=3)
A=matrix(c(1,2,3,-9,-2,2,9,0,1),nrow=3,ncol=3)#
P=matrix(c(0,0,1,0,1,0,1,0,0),nrow=3,ncol=3)#
b=matrix(c(1,9,3)mnrow=3,ncol=1)#
P%*%A#
P%*%b
A=matrix(c(1,2,3,-9,-2,2,9,0,1),nrow=3,ncol=3)#
P=matrix(c(0,0,1,0,1,0,1,0,0),nrow=3,ncol=3)#
b=matrix(c(1,9,3),nrow=3,ncol=1)#
P%*%A#
P%*%b
P
A
b=matrix(c(1,9,3),nrow=3,ncol=1)
b
P%*%b
17/(45000*50)
-0.11405/1.999
-0.0016/0.0678
0.0678/0.0016
-0.00413021/0.00774
2*500*log(5000-500)
0.5*500*log(5000-500)
0.64/0.64+0
0.64/(0.64+0.0089)
0.7014/(0.7014+ 0.0731)
4*26
6*22
260-132
128/4
4*4*4*2
128+108
6*18
260-108
152/4
4*9
38/4
6*4*2
18*4
16*2
32+72+48
18*6+6*2+4*2
18+6*2+4*2
36/9
###################CODE TO ESTIMATE GROWTH PARAMETERS FOR MALE BLUE SWIMMER CRAB FROM LENGTH FREQUENCY DATA############################
###################CODE TO ESTIMATE GROWTH PARAMETERS FOR MALE BLUE SWIMMER CRAB FROM LENGTH FREQUENCY DATA############################
###################CODE TO ESTIMATE GROWTH PARAMETERS FOR MALE BLUE SWIMMER CRAB FROM LENGTH FREQUENCY DATA############################
###################CODE TO ESTIMATE GROWTH PARAMETERS FOR MALE BLUE SWIMMER CRAB FROM LENGTH FREQUENCY DATA############################
#Set the necessary working directories#
#
#setwd("/Users/uqllloyd/Dropbox/AAUni/APhD/Blueswimmer/CrabStuff2withMMAlg/RcodesData")#
setwd("~/Dropbox/AAUni/APhD/Blueswimmer/RcodeData_03:10:2014/Male_Female")#
#Remove any old objects#
#
rm(list = ls())#
#DATA PRELIMINARIES#
#
#Read in the data set on the asymptotic males that was gathered through pots#
#
LFD_bigMales<-read.table("LFD_bigMalesFem",header=T)#
#Pull out the lengths and the dates from these data files#
#
LFD_bgM<-LFD_bigMales[which(LFD_bigMales$Sex==1),]#
Dates1<-as.Date(LFD_bgM$Date,"%d/%m/%y")               #
Lengths1<-LFD_bgM$Carapacewidth#
#Read in the trawl data on males that contains juvenile recruitment and adults#
#
LFD<-read.table("LFD")#
LFD<-LFD[which(LFD$Sex==1),]#
#Pull out the lengths and the dates from these data files#
#
Dates2<-as.Date(LFD$Date,"%d/%m/%Y")#
Lengths2<-LFD$Carapace.width#
#Concatenate the necessary elements from each file into a common dates and lengths array#
Dates <- c(Dates2,Dates1)#
Lengths <- c(Lengths2,Lengths1)#
#Pull out the year and month information from these dates#
#
YEAR <- format(Dates,'%Y')#
MONTHS <- format(Dates,'%m')#
#
# Specify the start months#
Start_Month=2#
End_Month_Yr1=8#
End_Month_Yr2=5#
#Pull out the years and months that we a re interested in i.e., those that don't contain 	recruitment#
#
WHICH85JO <- which((YEAR == '1985') & (as.numeric(MONTHS) %in% (Start_Month:End_Month_Yr1)))#
WHICH86FM <- which((YEAR == '1986') & (as.numeric(MONTHS) %in% (Start_Month:End_Month_Yr2)))#
#INITIALISE#
MON <- length(c(Start_Month: End_Month_Yr1,Start_Month:End_Month_Yr2)) #Assign how many months we would like to model#
LL <- Lengths[c(WHICH85JO,WHICH86FM)]						#Assign the number of individuals#
MM1985 <- as.numeric(MONTHS[WHICH85JO])-1					#Assign January to be the 0th months#
MM1986 <- as.numeric(MONTHS[WHICH86FM])+11					#Thus January of next year will be the 12 month. Plus we do this so that we don't have to estimate yr#
MM<-c(MM1985,MM1986)										#Concatenate these months values together#
MMLIST <- as.numeric(names(table(MM)))						#Make a list of the months from January first i.e., January 1986 is gets assigned a 12#
#Parameter Initialise#
#
NN <- length(MM)											#Initialise the number of individuals we have#
PI1 <- rep(1/3,MON)											#Initialise the PIs#
PI2 <- rep(1/3,MON)											#Initialise the PIs#
K0 <- 0.5														#Initialise K0 average K#
LINF <- 200													#Initialise asym length#
M01<-40														#Initialise first month's average length#
M02<-40														#Initialise second month's average length#
T0 <- 0														#Initialise first seasonality parameter#
T1 <- 0														#Initialise second seasonality parameter#
VV <- c(100,0,0)										   #Initialise the starting values for the variance quadratic update#
#Setting values for drawing plots #
#K0=1.2551210 ; LINF=159.0011937; M01=68.1528802; M02=84.8668358; T0= 0.1558529 ; T1=4.3682706 ; VV=c(-7049.1141407 ,   24.2019074  ,  -0.1509087)#
#
# 1.2551210     0.1558529     4.3682706   159.0011937    68.1528802   84.8668358 -7049.1141407    24.2019074    -0.1509087#
#
#FUNCTIONS#
#ASYMPTOTIC MEAN FUNCTION#
#
MU2A <- function(mm,K0,T0,T1,LINF,M01,M02)#
{#
  #mm=1#
  mmval <- MMLIST[mm]%%12#
  yrsold<-2#
  strmnth<-min(MM1985)#
  strmid<-strmnth/12+1/24+yrsold#
  endmid<-strmid+1#
  mm2=(mmval/12)+1/24+yrsold#
  t<-seq(0,1,0.01)#
  g<-K0+T0*cos(2*pi*t)+T1*sin(2*pi*t)#
  #plot(t,g)#
  Isneg<-min(g)#
  Isneg2<-max(g)#
  if (Isneg<0&Isneg2>0)#
  {#
    a=T0^2+T1^2#
	b=2*K0*T0#
	c=-(T1^2)+K0^2#
	u1=(-b+sqrt(b^2-4*a*c))/(2*a)#
	u2=(-b-sqrt(b^2-4*a*c))/(2*a)#
	r11=1-acos(u1)/(2*pi)+yrsold#
	r12=acos(u1)/(2*pi)+yrsold#
	r21=1-acos(u2)/(2*pi)+yrsold#
	r22=acos(u2)/(2*pi)+yrsold#
	roots<-c(r11, r12, r21, r22)#
	groot<-K0+T0*cos(2*pi* roots)+T1*sin(2*pi* roots)#
	gmin<-round(groot)#
	r1<-min(roots[which(gmin==0)])#
	r2<-max(roots[which(gmin==0)])#
    #Regime#
	zMid1=K0*(r1-strmid) + (T0/(2*pi))*(sin(2*pi*r1)-sin(2*pi*strmid)) - (T1/(2*pi))*(cos(2*pi*r1)-cos(2*pi*strmid))#
    zEnd1=K0*(endmid-r2) + (T0/(2*pi))*(sin(2*pi*endmid)-sin(2*pi*r2)) - (T1/(2*pi))*(cos(2*pi*endmid)-cos(2*pi*r2))#
    KKyr<-yrsold*(zEnd1+zMid1)#
    #Those less than r1#
    if (mm2<r1) {KK = KKyr + K0*(mm2-strmid) +   (T0/(2*pi))*(sin(2*pi*mm2)-sin(2*pi*strmid))-(T1/(2*pi))*(cos(2*pi*mm2)-cos(2*pi*strmid))}#
    #Those between r1 and r2#
    if (mm2>r1&mm2<r2) {KK= KKyr + K0*(r1-strmid) + (T0/(2*pi))*(sin(2*pi*r1)-sin(2*pi*strmid))-(T1/(2*pi))*(cos(2*pi*r1)-cos(2*pi*strmid))}#
    #Those after r2#
    if (mm2>r2)#
    {#
    zMid=K0*(r1-strmid) + (T0/(2*pi))*(sin(2*pi*r1)-sin(2*pi*strmid)) - (T1/(2*pi))*(cos(2*pi*r1)-cos(2*pi*strmid))#
    zEnd=K0*(mm2-r2)     + (T0/(2*pi))*(sin(2*pi*mm2)-sin(2*pi*r2))     - (T1/(2*pi))*(cos(2*pi*mm2)-cos(2*pi*r2))#
    KK<-zEnd+zMid+KKyr#
    }#
  } else {KK=K0*(mm2-strmid)+(T0/(2*pi))*(sin(2*pi*mm2)-sin(2*pi*strmid))-(T1/(2*pi))*(cos(2*pi*mm2)-cos(2*pi*strmid)) + yrsold*(K0*(endmid-strmid)+(T0/(2*pi))*(sin(2*pi*endmid)-sin(2*pi*strmid))-(T1/(2*pi))*(cos(2*pi*endmid)-cos(2*pi*strmid)) )}#
  if (MMLIST[mm]>max(MM1985)) {M02 + (LINF-M02)*(1-exp(-KK))} else (M01 + (LINF-M01)*(1-exp(-KK)))#
}#
#1 YEAR OLD ADULT's MEAN FUNCTION#
MUA <- function(mm,K0,T0,T1,LINF,M01,M02)#
{#
  mmval <- MMLIST[mm]%%12#
  yrsold<-1#
  strmnth<-min(MM1985)#
  strmid<-strmnth/12+1/24+yrsold#
  endmid<-strmid+1#
  mm2=(mmval/12)+1/24+yrsold#
  t<-seq(0,1,0.01)#
  g<-K0+T0*cos(2*pi*t)+T1*sin(2*pi*t)#
  Isneg<-min(g)#
  Isneg2<-max(g)#
  if (Isneg<0&Isneg2>0)#
  {#
    a=T0^2+T1^2#
	b=2*K0*T0#
	c=-(T1^2)+K0^2#
	u1=(-b+sqrt(b^2-4*a*c))/(2*a)#
	u2=(-b-sqrt(b^2-4*a*c))/(2*a)#
	r11=1-acos(u1)/(2*pi)+yrsold#
	r12=acos(u1)/(2*pi)+yrsold#
	r21=1-acos(u2)/(2*pi)+yrsold#
	r22=acos(u2)/(2*pi)+yrsold#
	roots<-c(r11, r12, r21, r22)#
	groot<-K0+T0*cos(2*pi* roots)+T1*sin(2*pi* roots)#
	gmin<-round(groot)#
	r1<-min(roots[which(gmin==0)])#
	r2<-max(roots[which(gmin==0)])#
    #Regime#
	zMid1=K0*(r1-strmid) + (T0/(2*pi))*(sin(2*pi*r1)-sin(2*pi*strmid)) - (T1/(2*pi))*(cos(2*pi*r1)-cos(2*pi*strmid))#
    zEnd1=K0*(endmid-r2) + (T0/(2*pi))*(sin(2*pi*endmid)-sin(2*pi*r2)) - (T1/(2*pi))*(cos(2*pi*endmid)-cos(2*pi*r2))#
    KKyr<-yrsold*(zEnd1+zMid1)#
    	#Those less than r1#
    	if (mm2<r1) {KK = KKyr + K0*(mm2-strmid) +   (T0/(2*pi))*(sin(2*pi*mm2)-sin(2*pi*strmid))-(T1/(2*pi))*(cos(2*pi*mm2)-cos(2*pi*strmid))}#
    	#Those between r1 and r2#
    	if (mm2>r1&mm2<r2) {KK= KKyr + K0*(r1-strmid) + (T0/(2*pi))*(sin(2*pi*r1)-sin(2*pi*strmid))-(T1/(2*pi))*(cos(2*pi*r1)-cos(2*pi*strmid))}#
    	#Those after r2#
    	if (mm2>r2)#
    		{#
    		zMid=K0*(r1-strmid) + (T0/(2*pi))*(sin(2*pi*r1)-sin(2*pi*strmid)) - (T1/(2*pi))*(cos(2*pi*r1)-cos(2*pi*strmid))#
    		zEnd=K0*(mm2-r2)     + (T0/(2*pi))*(sin(2*pi*mm2)-sin(2*pi*r2))     - (T1/(2*pi))*(cos(2*pi*mm2)-cos(2*pi*r2))#
    		KK<-zEnd+zMid+KKyr#
    		}#
  } else {KK=K0*(mm2-strmid)+(T0/(2*pi))*(sin(2*pi*mm2)-sin(2*pi*strmid))-(T1/(2*pi))*(cos(2*pi*mm2)-cos(2*pi*strmid)) + yrsold*(K0*(endmid-strmid)+(T0/(2*pi))*(sin(2*pi*endmid)-sin(2*pi*strmid))-(T1/(2*pi))*(cos(2*pi*endmid)-cos(2*pi*strmid)) )}#
  if (MMLIST[mm]>max(MM1985)) {M02 + (LINF-M02)*(1-exp(-KK))} else (M01 + (LINF-M01)*(1-exp(-KK)))#
}#
#THE JUVENUILES MEAN FUNCTION#
#
MUJ <- function(mm,K0,T0,T1,LINF,M01,M02)#
{#
	#mm=2#
	mmval <- MMLIST[mm]%%12#
  	yrsold<-0#
  	strmnth<-min(MM1985)#
  	strmid<-strmnth/12+1/24+yrsold#
  	endmid<-strmid+1#
  	mm2=(mmval/12)+1/24+yrsold#
  	t<-seq(0,1,0.01)#
	g<-K0+T0*cos(2*pi*t)+T1*sin(2*pi*t)#
	Isneg<-min(g)#
	Isneg2<-max(g)#
 	if (Isneg<0&Isneg2>0)#
  		{#
    	a=T0^2+T1^2#
		b=2*K0*T0#
		c=-(T1^2)+K0^2#
		u1=(-b+sqrt(b^2-4*a*c))/(2*a)#
		u2=(-b-sqrt(b^2-4*a*c))/(2*a)#
		r11=1-acos(u1)/(2*pi)#
		r12=acos(u1)/(2*pi)#
		r21=1-acos(u2)/(2*pi)#
		r22=acos(u2)/(2*pi)#
		roots<-c(r11, r12, r21, r22)#
		groot<-K0+T0*cos(2*pi* roots)+T1*sin(2*pi* roots)#
		gmin<-round(groot)#
		r1<-min(roots[which(gmin==0)])#
		r2<-max(roots[which(gmin==0)])#
    	#Regime#
#
    	#Those less than r1#
    		if (mm2<r1) {KK = K0*(mm2-strmid) +   (T0/(2*pi))*(sin(2*pi*mm2)-sin(2*pi*strmid))-(T1/(2*pi))*(cos(2*pi*mm2)-cos(2*pi*strmid))}#
    		#Those between r1 and r2#
    		if (mm2>r1&mm2<r2) {KK=K0*(r1-strmid) + (T0/(2*pi))*(sin(2*pi*r1)-sin(2*pi*strmid))-(T1/(2*pi))*(cos(2*pi*r1)-cos(2*pi*strmid))}#
    		#Those after r2#
    		if (mm2>r2)#
    			{#
    			zMid=K0*(r1-strmid) + (T0/(2*pi))*(sin(2*pi*r1)-sin(2*pi*strmid)) - (T1/(2*pi))*(cos(2*pi*r1)-cos(2*pi*strmid))#
    			zEnd=K0*(mm2-r2)     + (T0/(2*pi))*(sin(2*pi*mm2)-sin(2*pi*r2))     - (T1/(2*pi))*(cos(2*pi*mm2)-cos(2*pi*r2))#
    			KK<-zEnd+zMid#
    			}#
  	} else {KK=K0*(mm2-strmid)+(T0/(2*pi))*(sin(2*pi*mm2)-sin(2*pi*strmid))-(T1/(2*pi))*(cos(2*pi*mm2)-cos(2*pi*strmid))}	#
  if (MMLIST[mm]==min(MM1985))  {M01} else if (MMLIST[mm]==min(MM1986)) {M02} else if (MMLIST[mm]>min(MM1985)&MMLIST[mm]<min(MM1986)) {M01 + (LINF-M01)*(1-exp(-KK))} else {M02 + (LINF-M02)*(1-exp(-KK))}#
}#
#INITIALISE THE TAU's which are the inclusion probablities to all be a third#
TAU <- list()#
for (mm in 1:(MON))#
	{#
  		TAU[[mm]] <- matrix(1/3,NN,3)#
	}#
#INITIALISE THE AUXILLARY STORAGE ARRAYS FOR INSIDE LOOP ASSIGNMENT#
#
MU2A_AUX <- c()#
MUA_AUX <- c()#
MUJ_AUX <- c()#
for (mm in 1:MON)#
	{#
 	MU2A_AUX[mm] <- MU2A(mm,K0,T0,T1,LINF,M01,M02)#
  	MUA_AUX[mm] <- MUA(mm,K0,T0,T1,LINF,M01,M02)#
 	MUJ_AUX[mm] <- MUJ(mm,K0,T0,T1,LINF,M01,M02)#
	}#
#INITIALISE THE VARIANCE FUNCTIONS. THEY ARE ALL QUADRATIC FUNCTIONS OF THE MEAN FOR EACH COHORT#
#
VARJ <- function(mm,VV,K0,T0,T1,LINF,M01,M02)#
	{#
		max(exp(VV[1])+VV[2]*MUJ(mm,K0,T0,T1,LINF,M01,M02)+VV[3]*MUJ(mm,K0,T0,T1,LINF,M01,M02)^2,1)#
	}#
#
VARA <- function(mm,VV,K0,T0,T1,LINF,M01,M02)#
	{#
		max(exp(VV[1])+VV[2]*MUA(mm,K0,T0,T1,LINF,M01,M02)+VV[3]*MUA(mm,K0,T0,T1,LINF,M01,M02)^2,1)#
	}#
#
VAR2A <- function(mm,VV,K0,T0,T1,LINF,M01,M02)#
	{#
		max(exp(VV[1])+VV[2]*MU2A(mm,K0,T0,T1,LINF,M01,M02)+VV[3]*MU2A(mm,K0,T0,T1,LINF,M01,M02)^2,1)#
	}#
#INITIALISE THE LIKELIHOOD FUNCTION#
#
LOGLIKE <- 0#
for (mm in 1:MON)#
  {#
	LL2<-LL[which(MM==MMLIST[mm])]#
	LikGrp1<-PI1[mm]*dnorm(LL2,MU2A_AUX[mm],sqrt(VAR2A(mm,VV,K0,T0,T1,LINF,M01,M02)))#
	LikGrp2<-PI2[mm]*dnorm(LL2,MUA_AUX[mm],sqrt(VARA(mm,VV,K0,T0,T1,LINF,M01,M02)))#
	LikGrp3<-(1-(PI1[mm]+PI2[mm]))*dnorm(LL2,MUJ_AUX[mm],sqrt(VARJ(mm,VV,K0,T0,T1,LINF,M01,M02)))#
	LOGLIKE <- LOGLIKE + sum(log(LikGrp1 + LikGrp2 + LikGrp3))#
  }#
######WHILE LOOP BEGINS######WHILE LOOP BEGINS######WHILE LOOP BEGINS#
######WHILE LOOP BEGINS######WHILE LOOP BEGINS######WHILE LOOP BEGINS#
######WHILE LOOP BEGINS######WHILE LOOP BEGINS######WHILE LOOP BEGINS#
######WHILE LOOP BEGINS######WHILE LOOP BEGINS######WHILE LOOP BEGINS#
#THIS LOOP DOES ALL THE WORK AND INCLUDES TWO NELDER MEAD STEPS TO OPTIMISE THE NONLINEAR MEANS AND VARIANCES#
TOL <- 10^-6#
LOGOLD <- -Inf#
#
while (LOGLIKE - LOGOLD > TOL)#
{#
  LOGOLD <- LOGLIKE                     #Assign the current likelihood value to the an old value so we can evaluate the update#
	#UPDATE THE TAU SCORES AND THEN CALCULATE THE PIs GIVEN THESE TAU SCORES#
	for (mm in 1:MON)#
  	{#
    	Top1<-PI1[mm]*dnorm(LL,MU2A_AUX[mm],sqrt(VAR2A(mm,VV,K0,T0,T1,LINF,M01,M02)))							#Calculate the inclusion probablities for group 1#
    	Top2<-PI2[mm]*dnorm(LL,MUA_AUX[mm],sqrt(VARA(mm,VV,K0,T0,T1,LINF,M01,M02)))								#Calculate the inclusion probablities for group 2#
    	Bot<- Top1 + Top2 +(1-(PI1[mm]+PI2[mm]))*dnorm(LL,MUJ_AUX[mm],sqrt(VARJ(mm,VV,K0,T0,T1,LINF,M01,M02)))  #Calculate the sum of each of the classes#
    	TAU[[mm]][,1] <- Top1/Bot																				#Calculate the first group's tau scores#
    	TAU[[mm]][,2] <- Top2/Bot																				#Calculate the second group's tau scores#
   		TAU[[mm]][,3] <- 1-(TAU[[mm]][,1]+TAU[[mm]][,2])													  	#Calculate the third group's tau scores#
    	PI1[mm] <- sum((MM==MMLIST[mm])*TAU[[mm]][,1])/sum(MM==MMLIST[mm])										#Work out the PIs for group 1#
    	PI2[mm] <- sum((MM==MMLIST[mm])*TAU[[mm]][,2])/sum(MM==MMLIST[mm])										#Work out the PIs for group 2#
  	}#
  #DEFINE THE LIKELIHOOD FUNCTION OUTSIDE THE LOOP TO UPDATE THE MEANS#
#
  PARA <- c(K0,T0,T1,LINF,M01,M02)#
  OPTIFUN <- function(PARA)#
  {#
  	PARA[2]=PARA[3]*cos(2*pi*0.1089602)/(sqrt(1-cos(2*pi*0.1089602)^2))#
  	LOGLIKE <- 0#
  		for (mm in 1:MON)#
  			{#
			LL2<-LL[which(MM==MMLIST[mm])]#
			LikGrp1<-PI1[mm]*dnorm(LL2,MU2A(mm,PARA[1],PARA[2],PARA[3],PARA[4],PARA[5],PARA[6]),sqrt(VAR2A(mm,VV,PARA[1],PARA[2],PARA[3],PARA[4],PARA[5],PARA[6])))#
			LikGrp2<-PI2[mm]*dnorm(LL2,MUA(mm,PARA[1],PARA[2],PARA[3],PARA[4],PARA[5],PARA[6]),sqrt(VARA(mm,VV,PARA[1],PARA[2],PARA[3],PARA[4],PARA[5],PARA[6]))) #
			LikGrp3<-(1-(PI1[mm]+PI2[mm]))*dnorm(LL2,MUJ(mm,PARA[1],PARA[2],PARA[3],PARA[4],PARA[5],PARA[6]),sqrt(VARJ(mm,VV,PARA[1],PARA[2],PARA[3],PARA[4],PARA[5],PARA[6])))#
			LOGLIKE <- LOGLIKE + sum(log(LikGrp1 + LikGrp2 + LikGrp3))#
  			}#
	-LOGLIKE#
  }#
  OPTIM <- optim(PARA,OPTIFUN, control = list(maxit = 10000))														#RUN OPTIM to find the best parameters given the taus and Pis#
  print("Did optim 1 converge?")#
  print(OPTIM$convergence)#
  #Assign the estimates from optim to the parameters#
  K0 <- OPTIM$par[1]#
  #T0 <- OPTIM$par[2]#
  T1 <- OPTIM$par[3]#
  # Constrained maximum#
  T0=T1*cos(2*pi*0.1089602)/(sqrt(1-cos(2*pi*0.1089602)^2))#
  LINF <- OPTIM$par[4]#
  M01 <- OPTIM$par[5]#
  M02<-OPTIM$par[6]#
  #Calculate the means for each group based on these new estimates#
  MU2A_AUX <- c()#
  MUA_AUX <- c()#
  MUJ_AUX <- c()#
  for (mm in 1:MON)#
  {#
  	#Compute the means for each month #
    MU2A_AUX[mm] <- MU2A(mm,K0,T0,T1,LINF,M01,M02)#
    MUA_AUX[mm] <- MUA(mm,K0,T0,T1,LINF,M01,M02)#
    MUJ_AUX[mm] <- MUJ(mm,K0,T0,T1,LINF,M01,M02)#
  }#
  #OPTIMISE THE VARIANCES GIVEN THE NEW MEANS#
  #DEFINE THE LIKELIHOOD FUNCTION OUTSIDE THE LOOP TO UPDATE THE VARIANCES #
  PARA2 <- VV#
  VAROPTIFUN <- function(PARA2)#
  {#
  LOGLIKE <- 0#
  		for (mm in 1:MON)#
  			{#
  			#mm=1#
			LL2<-LL[which(MM==MMLIST[mm])]#
			LikGrp1<- PI1[mm]*dnorm(LL2,MU2A_AUX[mm],sqrt(VAR2A(mm,PARA2,K0,T0,T1,LINF,M01,M02)))#
			LikGrp2<- PI2[mm]*dnorm(LL2,MUA_AUX[mm],sqrt(VARA(mm,PARA2,K0,T0,T1,LINF,M01,M02)))#
			LikGrp3<-(1-(PI1[mm]+PI2[mm]))*dnorm(LL2,MUJ_AUX[mm],sqrt(VARJ(mm,PARA2,K0,T0,T1,LINF,M01,M02)))#
			LOGLIKE <- LOGLIKE + sum(log(LikGrp1 + LikGrp2 + LikGrp3))#
  			}#
	-LOGLIKE#
  }#
#
  OPTIM2 <- optim(PARA2,VAROPTIFUN,control = list(maxit = 10000))													#RUN OPTIM to find the best variances given the taus and Pis#
  VV <- OPTIM2$par#
  print("Did optim 2 converge?")#
  print(OPTIM2$convergence)  #
  #COMPUTE THE LIKELIHOOD GIVEN ALL THESE NICE NEW UPDATES#
  LOGLIKE <- 0#
  for (mm in 1:MON)#
  {#
	LL2<-LL[which(MM==MMLIST[mm])]#
	LikGrp1<-PI1[mm]*dnorm(LL2,MU2A_AUX[mm],sqrt(VAR2A(mm,VV,K0,T0,T1,LINF,M01,M02)))#
	LikGrp2<-PI2[mm]*dnorm(LL2,MUA_AUX[mm],sqrt(VARA(mm,VV,K0,T0,T1,LINF,M01,M02)))#
	LikGrp3<-(1-(PI1[mm]+PI2[mm]))*dnorm(LL2,MUJ_AUX[mm],sqrt(VARJ(mm,VV,K0,T0,T1,LINF,M01,M02)))#
	LOGLIKE <- LOGLIKE + sum(log(LikGrp1 + LikGrp2 + LikGrp3))#
  }#
  #PRINT OUT OUR NEW UPDATES FOR THE PARAMETERS AND THE LIKELIHOOD#
  print(c(LOGLIKE,LOGLIKE-LOGOLD))#
  print(c(PARA,PARA2))#
  #DRAW SOME NICE REAL TIME PLOTS SO WE CAN MONITOR CONVERGENCE#
  par(mfrow = c(3,5))#
  XX <- 0:200#
  xlabNam<-c("Feb., 1985","Mar., 1985","Apr., 1985","May, 1985","Jun., 1985","Jul, 1985","Aug., 1985","Feb., 1986","Mar., 1986","Apr., 1986","May, 1986")#
  for (mm in 1:MON)#
  {#
    hist(LL[which(MM==MMLIST[mm])],breaks=30,prob=T,xlim=c(20,210),ylim=c(0,0.055),xlab=xlabNam[mm],ylab="",main='')#
    lines(XX,PI1[mm]*dnorm(XX,MU2A(mm,K0,T0,T1,LINF,M01,M02),sqrt(VAR2A(mm,VV,K0,T0,T1,LINF,M01,M02))),col='red',lwd=2.5)#
    lines(XX,PI2[mm]*dnorm(XX,MUA(mm,K0,T0,T1,LINF,M01,M02),sqrt(VARA(mm,VV,K0,T0,T1,LINF,M01,M02))),col='green',lwd=2.5)#
    lines(XX,(1-(PI1[mm]+PI2[mm]))*dnorm(XX,MUJ_AUX[mm],sqrt(VARJ(mm,VV,K0,T0,T1,LINF,M01,M02))),col='blue',lwd=2.5)#
  }#
  XX2 <- seq(0,1,length.out=100)#
  YY <- K0 + T0*cos(2*pi*XX2) + T1*sin(2*pi*XX2)#
  plot(XX2,((YY+abs(YY))/2),type='l',xlab="Fraction of a year since Jan 1",ylab="k (per year)",lwd=2.5)#
  BLAH <- 50:160#
  plot(BLAH,exp(VV[1])+VV[2]*BLAH+VV[3]*BLAH^2,type='l',xlab="Mean length (mm)", ylab="Variance",lwd=2.5,ylim=c(0,600))#
  #plot(density(rnorm(1000000,PARA[4],sqrt(PARA2[2]*PARA[4]+ PARA2[3]*PARA[4]^2))),xlab="Length (mm)",main="",lwd=2.5)#
}
